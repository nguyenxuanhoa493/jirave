import streamlit as st
import os
import sys
import pandas as pd
from datetime import datetime, timezone, timedelta
import pytz
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Set page configuration first
st.set_page_config(
    page_title="B√°o C√°o Sprint | Jira Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="auto",
)

# Add the project root to the Python path
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(__file__))))

# Import from src modules
from src.config.config import (
    APP_TITLE,
    APP_LAYOUT,
    SIDEBAR_STATE,
    DEFAULT_TIMEZONE,
    DEFAULT_PROJECT,
)
from src.services.jira_client import JiraClient
from src.services.mongodb_client import MongoDBClient


# H√†m ƒë·ªÉ l·∫•y tr·∫°ng th√°i t·ª´ issue m·ªôt c√°ch an to√†n
def safe_get_status(issue, field_name="status"):
    """L·∫•y tr·∫°ng th√°i t·ª´ issue m·ªôt c√°ch an to√†n

    Args:
        issue (dict): D·ªØ li·ªáu issue
        field_name (str): T√™n tr∆∞·ªùng c·∫ßn l·∫•y (status ho·∫∑c current_status)

    Returns:
        str: Gi√° tr·ªã tr·∫°ng th√°i h·ª£p l·ªá
    """
    value = issue.get(field_name)

    # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† tr·∫£ v·ªÅ chu·ªói ph√π h·ª£p
    if value is None:
        return ""
    elif isinstance(value, dict) and "name" in value:
        return value.get("name", "")
    elif isinstance(value, (int, float)):
        return str(value)
    elif value == "None" or value == "null":
        return ""
    else:
        return str(value)


class SprintReportService:
    """Service cho b√°o c√°o sprint"""

    def __init__(self):
        """Kh·ªüi t·∫°o service"""
        self.jira = JiraClient()
        self.mongo_client = MongoDBClient()

    def get_all_sprints(self, project_key=DEFAULT_PROJECT):
        """L·∫•y danh s√°ch t·∫•t c·∫£ sprint t·ª´ API Jira

        Args:
            project_key (str): M√£ d·ª± √°n

        Returns:
            list: Danh s√°ch c√°c sprint
        """
        try:
            sprints = self.jira.get_all_sprints(project_key)
            if sprints:
                st.toast(f"ƒê√£ t·∫£i {len(sprints)} sprints t·ª´ Jira API!", icon="‚úÖ")
                return sprints
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y sprint n√†o cho d·ª± √°n {project_key}")
                return []
        except Exception as e:
            st.error(f"L·ªói khi l·∫•y danh s√°ch sprint t·ª´ API: {str(e)}")
            return []

    def get_sprint_issues_from_mongo(self, sprint_id):
        """L·∫•y danh s√°ch issues c·ªßa sprint t·ª´ MongoDB

        Args:
            sprint_id (int): ID c·ªßa sprint

        Returns:
            list: Danh s√°ch issues c·ªßa sprint t·ª´ MongoDB
        """
        if not self.mongo_client.is_connected():
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB!")
            return None

        issues = self.mongo_client.get_issues(sprint_id)
        return issues

    def get_sprint_info_from_mongo(self, sprint_id):
        """L·∫•y th√¥ng tin c·ªßa sprint t·ª´ MongoDB

        Args:
            sprint_id (int): ID c·ªßa sprint

        Returns:
            dict: Th√¥ng tin c·ªßa sprint t·ª´ MongoDB, bao g·ªìm updated_at
        """
        if not self.mongo_client.is_connected():
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB!")
            return None

        sprint_info = self.mongo_client.get_sprint_info(sprint_id)
        return sprint_info


def calculate_days_remaining(end_date_str):
    """T√≠nh s·ªë ng√†y c√≤n l·∫°i c·ªßa sprint

    Args:
        end_date_str (str): Chu·ªói ng√†y k·∫øt th√∫c sprint (ƒë·ªãnh d·∫°ng ISO)

    Returns:
        int: S·ªë ng√†y c√≤n l·∫°i (√¢m n·∫øu sprint ƒë√£ k·∫øt th√∫c)
    """
    if not end_date_str:
        return None

    try:
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian k·∫øt th√∫c sprint sang ƒë·ªëi t∆∞·ª£ng datetime v·ªõi m√∫i gi·ªù
        end_date = datetime.fromisoformat(end_date_str.replace("Z", "+00:00"))

        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù GMT+7
        vietnam_tz = pytz.timezone("Asia/Ho_Chi_Minh")
        end_date = end_date.astimezone(vietnam_tz)

        # L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù GMT+7
        now = datetime.now(vietnam_tz)

        # T√≠nh s·ªë ng√†y c√≤n l·∫°i
        days_remaining = (
            end_date.replace(hour=0, minute=0, second=0, microsecond=0)
            - now.replace(hour=0, minute=0, second=0, microsecond=0)
        ).days

        return days_remaining
    except Exception as e:
        st.error(f"L·ªói khi t√≠nh s·ªë ng√†y c√≤n l·∫°i: {str(e)}")
        return None


def calculate_sprint_progress(start_date_str, end_date_str):
    """T√≠nh to√°n ph·∫ßn trƒÉm ti·∫øn ƒë·ªô c·ªßa sprint

    Args:
        start_date_str (str): Chu·ªói ng√†y b·∫Øt ƒë·∫ßu sprint (ƒë·ªãnh d·∫°ng ISO)
        end_date_str (str): Chu·ªói ng√†y k·∫øt th√∫c sprint (ƒë·ªãnh d·∫°ng ISO)

    Returns:
        float: Ph·∫ßn trƒÉm ti·∫øn ƒë·ªô (0-100), None n·∫øu kh√¥ng t√≠nh ƒë∆∞·ª£c
    """
    if not start_date_str or not end_date_str:
        return None

    try:
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian sang ƒë·ªëi t∆∞·ª£ng datetime v·ªõi m√∫i gi·ªù
        start_date = datetime.fromisoformat(start_date_str.replace("Z", "+00:00"))
        end_date = datetime.fromisoformat(end_date_str.replace("Z", "+00:00"))

        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù GMT+7
        vietnam_tz = pytz.timezone("Asia/Ho_Chi_Minh")
        start_date = start_date.astimezone(vietnam_tz)
        end_date = end_date.astimezone(vietnam_tz)

        # L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù GMT+7
        now = datetime.now(vietnam_tz)

        # N·∫øu ch∆∞a b·∫Øt ƒë·∫ßu
        if now < start_date:
            return 0

        # N·∫øu ƒë√£ k·∫øt th√∫c
        if now > end_date:
            return 100

        # T√≠nh t·ªïng th·ªùi gian c·ªßa sprint
        total_duration = (end_date - start_date).total_seconds()

        # T√≠nh th·ªùi gian ƒë√£ tr√¥i qua
        elapsed_duration = (now - start_date).total_seconds()

        # T√≠nh ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
        progress = (elapsed_duration / total_duration) * 100

        return min(max(progress, 0), 100)  # ƒê·∫£m b·∫£o gi√° tr·ªã n·∫±m trong kho·∫£ng 0-100
    except Exception as e:
        st.error(f"L·ªói khi t√≠nh ti·∫øn ƒë·ªô sprint: {str(e)}")
        return None


def calculate_burndown_data(
    filtered_issues, start_date, end_date, metric="issues", done_type="completed"
):
    """T√≠nh to√°n d·ªØ li·ªáu cho Burn Down Chart

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
        start_date (datetime): Ng√†y b·∫Øt ƒë·∫ßu sprint
        end_date (datetime): Ng√†y k·∫øt th√∫c sprint
        metric (str): Lo·∫°i metric ('issues' ho·∫∑c 'time')
        done_type (str): Lo·∫°i th·ªùi gian ho√†n th√†nh ('completed' ho·∫∑c 'dev_done_date')

    Returns:
        tuple: (dates, ideal_data, actual_data)
    """
    # Chuy·ªÉn ƒë·ªïi start_date v√† end_date th√†nh datetime object v·ªõi timezone
    vietnam_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    start_date = datetime.fromisoformat(start_date.replace("Z", "+00:00")).astimezone(
        vietnam_tz
    )
    end_date = datetime.fromisoformat(end_date.replace("Z", "+00:00")).astimezone(
        vietnam_tz
    )

    # T·∫°o danh s√°ch c√°c ng√†y t·ª´ start_date ƒë·∫øn end_date
    dates = []
    current_date = start_date
    while current_date <= end_date:
        dates.append(current_date)
        current_date += timedelta(days=1)

    # T√≠nh t·ªïng s·ªë issue ho·∫∑c th·ªùi gian d·ª± ki·∫øn
    if metric == "issues":
        total = len(filtered_issues)
    else:  # metric == 'time'
        total = sum(issue.get("time_estimate", 0) for issue in filtered_issues)

    # T·∫°o ƒë∆∞·ªùng l√Ω t∆∞·ªüng (ideal burndown)
    ideal_data = []
    days_total = len(dates)
    for i in range(days_total):
        ideal_remaining = total * (1 - i / (days_total - 1))
        ideal_data.append(ideal_remaining)

    # T·∫°o ƒë∆∞·ªùng th·ª±c t·∫ø (actual burndown)
    actual_data = []
    for date in dates:
        if metric == "issues":
            # ƒê·∫øm s·ªë issue ch∆∞a ho√†n th√†nh t·∫°i ng√†y n√†y
            remaining = len(
                [
                    issue
                    for issue in filtered_issues
                    if issue.get(done_type)
                    in [None, "", "N/A"]  # X·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
                    or (
                        isinstance(issue.get(done_type), str)
                        and issue.get(done_type) != "N/A"
                        and datetime.strptime(
                            issue.get(done_type), "%d/%m/%Y %H:%M"
                        ).replace(tzinfo=vietnam_tz)
                        > date
                    )
                ]
            )
        else:  # metric == 'time'
            # T√≠nh t·ªïng th·ªùi gian c·ªßa c√°c issue ch∆∞a ho√†n th√†nh
            remaining = sum(
                issue.get("time_estimate", 0)
                for issue in filtered_issues
                if issue.get(done_type)
                in [None, "", "N/A"]  # X·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
                or (
                    isinstance(issue.get(done_type), str)
                    and issue.get(done_type) != "N/A"
                    and datetime.strptime(
                        issue.get(done_type), "%d/%m/%Y %H:%M"
                    ).replace(tzinfo=vietnam_tz)
                    > date
                )
            )
        actual_data.append(remaining)

    return dates, ideal_data, actual_data


def display_burndown_chart(filtered_issues, start_date, end_date):
    """Hi·ªÉn th·ªã Burn Down Chart

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
        start_date (str): Ng√†y b·∫Øt ƒë·∫ßu sprint
        end_date (str): Ng√†y k·∫øt th√∫c sprint
    """
    st.subheader("Burn Down Chart")

    # T·∫°o c√°c t√πy ch·ªçn
    col1, col2 = st.columns(2)
    with col1:
        metric = st.selectbox(
            "Ch·ªçn metric",
            options=["issues", "time"],
            format_func=lambda x: (
                "S·ªë l∆∞·ª£ng issue" if x == "issues" else "Th·ªùi gian d·ª± ki·∫øn (gi·ªù)"
            ),
        )
    with col2:
        done_type = st.selectbox(
            "Lo·∫°i th·ªùi gian ho√†n th√†nh",
            options=["dev_done_date", "completed"],
            format_func=lambda x: (
                "Th·ªùi gian Dev Done"
                if x == "dev_done_date"
                else "Th·ªùi gian ho√†n th√†nh (Completed)"
            ),
        )

    # T√≠nh to√°n d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    dates, ideal_data, actual_data = calculate_burndown_data(
        filtered_issues, start_date, end_date, metric, done_type
    )

    # T·∫°o bi·ªÉu ƒë·ªì
    fig = go.Figure()

    # Th√™m ƒë∆∞·ªùng l√Ω t∆∞·ªüng
    fig.add_trace(
        go.Scatter(
            x=dates,
            y=ideal_data,
            name="L√Ω t∆∞·ªüng",
            line=dict(color="gray", dash="dash"),
        )
    )

    # Th√™m ƒë∆∞·ªùng th·ª±c t·∫ø
    fig.add_trace(
        go.Scatter(
            x=dates,
            y=actual_data,
            name="Th·ª±c t·∫ø",
            line=dict(color="blue"),
        )
    )

    # C·∫≠p nh·∫≠t layout
    title = f"Burn Down Chart - {'S·ªë l∆∞·ª£ng issue' if metric == 'issues' else 'Th·ªùi gian d·ª± ki·∫øn'}"
    y_title = "S·ªë l∆∞·ª£ng c√≤n l·∫°i" if metric == "issues" else "Gi·ªù c√≤n l·∫°i"

    fig.update_layout(
        title=title,
        xaxis_title="Ng√†y",
        yaxis_title=y_title,
        hovermode="x unified",
        showlegend=True,
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)


def display_status_chart(filtered_issues):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë status

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
    """
    st.subheader("Ph√¢n b·ªë tr·∫°ng th√°i")

    # T·∫°o options trong c√πng m·ªôt h√†ng
    col1, col2 = st.columns(2)
    with col1:
        show_by_assignee = st.toggle("Hi·ªÉn th·ªã theo Assignee", value=False)
    with col2:
        metric = st.selectbox(
            "Hi·ªÉn th·ªã theo",
            options=["issues", "time", "sprint_time"],
            format_func=lambda x: (
                "S·ªë l∆∞·ª£ng issue"
                if x == "issues"
                else (
                    "Th·ªùi gian d·ª± ki·∫øn (gi·ªù)"
                    if x == "time"
                    else "Th·ªùi gian ƒë√£ l√†m trong sprint (gi·ªù)"
                )
            ),
        )

    # ƒê·ªãnh nghƒ©a th·ª© t·ª± c√°c tr·∫°ng th√°i
    status_order = [
        "To Do",
        "Reopen",
        "Close",
        "In Progress",
        "Dev Done",
        "Test Done",
        "Deployed",
        "Done",
    ]

    # Chu·∫©n b·ªã d·ªØ li·ªáu
    if show_by_assignee:
        # Nh√≥m theo assignee v√† status
        data = {}
        for issue in filtered_issues:
            assignee = issue.get("assignee", "Kh√¥ng c√≥ assignee")
            status = issue.get("status", "Kh√¥ng c√≥ status")
            if assignee not in data:
                data[assignee] = {}
            if status not in data[assignee]:
                data[assignee][status] = 0
            # T√≠nh theo metric ƒë∆∞·ª£c ch·ªçn
            if metric == "issues":
                data[assignee][status] += 1
            elif metric == "time":  # th·ªùi gian d·ª± ki·∫øn
                data[assignee][status] += issue.get("time_estimate", 0)
            else:  # sprint_time - th·ªùi gian ƒë√£ l√†m trong sprint
                data[assignee][status] += issue.get("sprint_time_spent", 0)

        # L·∫•y danh s√°ch t·∫•t c·∫£ status c√≥ th·ªÉ c√≥ v√† s·∫Øp x·∫øp theo th·ª© t·ª± ƒë·ªãnh nghƒ©a
        all_statuses = set(
            status for assignee_data in data.values() for status in assignee_data.keys()
        )
        # S·∫Øp x·∫øp status theo th·ª© t·ª± ƒë√£ ƒë·ªãnh nghƒ©a
        sorted_statuses = [s for s in status_order if s in all_statuses]
        # Th√™m c√°c status kh√¥ng n·∫±m trong danh s√°ch ƒë·ªãnh nghƒ©a
        sorted_statuses.extend(
            sorted([s for s in all_statuses if s not in status_order])
        )

        # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        fig = go.Figure()
        for status in sorted_statuses:
            fig.add_trace(
                go.Bar(
                    name=status,
                    y=list(data.keys()),  # assignees l√† tr·ª•c y
                    x=[data[assignee].get(status, 0) for assignee in data.keys()],
                    orientation="h",
                )
            )

        # C·∫≠p nh·∫≠t layout
        fig.update_layout(
            barmode="stack",
            height=max(
                350, len(data) * 50
            ),  # ƒêi·ªÅu ch·ªânh chi·ªÅu cao theo s·ªë l∆∞·ª£ng assignee
            yaxis={
                "categoryorder": "total ascending"
            },  # S·∫Øp x·∫øp theo t·ªïng s·ªë issue/th·ªùi gian
            xaxis_title=(
                "S·ªë l∆∞·ª£ng issue"
                if metric == "issues"
                else (
                    "Th·ªùi gian d·ª± ki·∫øn (gi·ªù)"
                    if metric == "time"
                    else "Th·ªùi gian ƒë√£ l√†m trong sprint (gi·ªù)"
                )
            ),
            margin=dict(l=200),  # TƒÉng margin b√™n tr√°i ƒë·ªÉ hi·ªÉn th·ªã t√™n assignee
        )

    else:
        # Nh√≥m theo status
        status_counts = {}
        for issue in filtered_issues:
            status = issue.get("status", "Kh√¥ng c√≥ status")
            if status not in status_counts:
                status_counts[status] = 0
            # T√≠nh theo metric ƒë∆∞·ª£c ch·ªçn
            if metric == "issues":
                status_counts[status] += 1
            elif metric == "time":  # th·ªùi gian d·ª± ki·∫øn
                status_counts[status] += issue.get("time_estimate", 0)
            else:  # sprint_time - th·ªùi gian ƒë√£ l√†m trong sprint
                status_counts[status] += issue.get("sprint_time_spent", 0)

        # L·ªçc v√† s·∫Øp x·∫øp status theo th·ª© t·ª± ƒë√£ ƒë·ªãnh nghƒ©a
        sorted_statuses = [s for s in status_order if s in status_counts]
        # Th√™m c√°c status kh√¥ng n·∫±m trong danh s√°ch ƒë·ªãnh nghƒ©a
        sorted_statuses.extend(
            sorted([s for s in status_counts.keys() if s not in status_order])
        )

        # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        fig = go.Figure()

        # Ch·ªâ t·∫°o m·ªôt bar v√† stack c√°c status
        for status in sorted_statuses:
            fig.add_trace(
                go.Bar(
                    name=status,
                    x=[status_counts[status]],
                    y=["Issues"],
                    orientation="h",
                )
            )

        # C·∫≠p nh·∫≠t layout
        fig.update_layout(
            barmode="stack",
            height=300,  # Chi·ªÅu cao c·ªë ƒë·ªãnh cho m·ªôt bar
            xaxis_title=(
                "S·ªë l∆∞·ª£ng issue"
                if metric == "issues"
                else (
                    "Th·ªùi gian d·ª± ki·∫øn (gi·ªù)"
                    if metric == "time"
                    else "Th·ªùi gian ƒë√£ l√†m trong sprint (gi·ªù)"
                )
            ),
            margin=dict(l=100),  # Margin b√™n tr√°i
            showlegend=True,  # Hi·ªÉn th·ªã legend
            legend=dict(
                orientation="h",  # Legend n·∫±m ngang
                yanchor="bottom",
                y=1.02,  # ƒê·∫∑t legend ph√≠a tr√™n bi·ªÉu ƒë·ªì
                xanchor="right",
                x=1,
            ),
        )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)


def display_distribution_charts(filtered_issues):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë theo lo·∫°i issue v√† customer

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
    """
    # T·∫°o layout 2 c·ªôt cho 2 bi·ªÉu ƒë·ªì
    dist_col1, dist_col2 = st.columns(2)

    with dist_col1:
        st.subheader(
            "Ph√¢n b·ªë theo lo·∫°i Issue", help="Ph√¢n b·ªë s·ªë l∆∞·ª£ng issue theo t·ª´ng lo·∫°i"
        )
        # T√≠nh to√°n s·ªë l∆∞·ª£ng theo lo·∫°i issue
        issue_types = {}
        for issue in filtered_issues:
            issue_type = issue.get("issue_type", "Kh√¥ng x√°c ƒë·ªãnh")
            issue_types[issue_type] = issue_types.get(issue_type, 0) + 1

        # T·∫°o bi·ªÉu ƒë·ªì
        fig_type = go.Figure(
            data=[
                go.Pie(
                    labels=list(issue_types.keys()),
                    values=list(issue_types.values()),
                    hole=0.4,
                    textposition="auto",
                    textinfo="percent+label",
                )
            ]
        )
        fig_type.update_layout(
            showlegend=True,
            legend=dict(
                orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5
            ),
            annotations=[
                dict(
                    text=f"T·ªïng s·ªë: {sum(issue_types.values())}",
                    x=0.5,
                    y=0.5,
                    font_size=12,
                    showarrow=False,
                    xanchor="center",
                    yanchor="middle",
                )
            ],
        )
        st.plotly_chart(fig_type, use_container_width=True)

    with dist_col2:
        st.subheader(
            "Ph√¢n b·ªë theo Customer (Top 5)",
            help="Ph√¢n b·ªë s·ªë l∆∞·ª£ng issue theo 5 kh√°ch h√†ng l·ªõn nh·∫•t",
        )
        # T√≠nh to√°n s·ªë l∆∞·ª£ng theo customer
        customers = {}
        for issue in filtered_issues:
            customer = issue.get("customer", "Kh√¥ng x√°c ƒë·ªãnh")
            if customer != "N/A" and customer != "Kh√¥ng x√°c ƒë·ªãnh":
                customers[customer] = customers.get(customer, 0) + 1

        # L·∫•y top 5 customer c√≥ s·ªë l∆∞·ª£ng issue nhi·ªÅu nh·∫•t
        top_customers = dict(
            sorted(customers.items(), key=lambda x: x[1], reverse=True)[:5]
        )

        # T·∫°o bi·ªÉu ƒë·ªì
        fig_customer = go.Figure(
            data=[
                go.Pie(
                    labels=list(top_customers.keys()),
                    values=list(top_customers.values()),
                    hole=0.4,
                    textposition="auto",
                    textinfo="percent+label",
                )
            ]
        )
        fig_customer.update_layout(
            showlegend=True,
            legend=dict(
                orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5
            ),
            annotations=[
                dict(
                    text=f"T·ªïng s·ªë: {sum(top_customers.values())}",
                    x=0.5,
                    y=0.5,
                    font_size=12,
                    showarrow=False,
                    xanchor="center",
                    yanchor="middle",
                )
            ],
        )
        st.plotly_chart(fig_customer, use_container_width=True)


def display_time_diff_charts(
    filtered_issues, show_dashboard_final=True, include_todo=False
):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë ch√™nh l·ªách th·ªùi gian

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
        show_dashboard_final (bool): Ch·ªâ hi·ªÉn th·ªã issues c√≥ Show In Dashboard Final
        include_todo (bool): B·ªï sung issues To Do c√≥ Show In Dashboard
    """
    st.subheader("Ph√¢n b·ªë ch√™nh l·ªách th·ªùi gian")

    # Th√™m toggle switch ƒë·ªÉ t√≠nh c·∫£ c√°c issue ƒë√£ ho√†n th√†nh kh√°c
    include_other_done = st.toggle(
        "T√≠nh c·∫£ issue Dev Done, Test Done, Deployed",
        value=True,
        help="Bao g·ªìm c√°c issue c√≥ tr·∫°ng th√°i Dev Done, Test Done, Deployed trong ph√¢n t√≠ch ch√™nh l·ªách th·ªùi gian",
    )

    # L·ªçc issues theo ƒëi·ªÅu ki·ªán show_in_dashboard_final v√† include_todo
    issues_to_analyze = filtered_issues.copy()
    if show_dashboard_final:
        issues_to_analyze = [
            issue
            for issue in issues_to_analyze
            if issue.get("show_in_dashboard_final", False)
        ]
        # N·∫øu include_todo ƒë∆∞·ª£c b·∫≠t, b·ªï sung th√™m c√°c issue To Do c√≥ show_in_dashboard
        if include_todo:
            todo_issues = [
                issue
                for issue in filtered_issues
                if issue.get("status") == "To Do"
                and issue.get("show_in_dashboard", False)
                and not issue.get("show_in_dashboard_final", False)
            ]
            issues_to_analyze.extend(todo_issues)

        if not issues_to_analyze:
            st.warning("Kh√¥ng c√≥ issue n√†o th·ªèa m√£n ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã!")
            return

    # L·ªçc issues theo tr·∫°ng th√°i ho√†n th√†nh
    done_statuses = ["done"]
    if include_other_done:
        done_statuses.extend(["dev done", "test done", "deployed"])

    done_issues = [
        issue
        for issue in issues_to_analyze
        if issue.get("status", "").lower() in done_statuses
    ]

    if not done_issues:
        status_text = (
            "Done" if not include_other_done else "Done/Dev Done/Test Done/Deployed"
        )
        st.info(
            f"Kh√¥ng c√≥ issue n√†o ·ªü tr·∫°ng th√°i {status_text} ƒë·ªÉ ph√¢n t√≠ch ch√™nh l·ªách th·ªùi gian."
        )
        return

    # T·∫°o layout 2 c·ªôt cho 2 bi·ªÉu ƒë·ªì
    diff_col1, diff_col2 = st.columns(2)

    # T√≠nh to√°n ch√™nh l·ªách th·ªùi gian cho m·ªói issue Done
    time_diffs = []
    issue_diffs = []
    for issue in done_issues:
        time_estimate = issue.get("time_estimate", 0)
        time_spent = issue.get("time_spent", 0)
        time_diff = time_estimate - time_spent
        # Ch·ªâ th√™m v√†o danh s√°ch n·∫øu c√≥ ch√™nh l·ªách
        if time_diff != 0:
            time_diffs.append(time_diff)
            issue_diffs.append(
                {
                    "key": issue.get("key"),
                    "summary": issue.get("summary", ""),
                    "diff": time_diff,
                    "estimate": time_estimate,
                    "spent": time_spent,
                    "status": issue.get("status", ""),
                    "assignee": issue.get("assignee", "Kh√¥ng c√≥"),
                }
            )

    with diff_col1:
        st.subheader(
            "Top 5 ch√™nh l·ªách l·ªõn nh·∫•t",
            help="5 issue c√≥ ch√™nh l·ªách th·ªùi gian l·ªõn nh·∫•t (gi·ªù)",
        )

        if not issue_diffs:
            st.info("Kh√¥ng c√≥ issue n√†o c√≥ ch√™nh l·ªách th·ªùi gian.")
            return

        # Hi·ªÉn th·ªã b·∫£ng top 5
        for issue in sorted(issue_diffs, key=lambda x: abs(x["diff"]), reverse=True)[
            :5
        ]:
            status_color = "üî¥" if issue["diff"] < 0 else "üü¢"
            time_diff = issue["diff"]
            time_diff_text = f"{time_diff:+.1f}h" if time_diff != 0 else "0h"
            time_diff_color = (
                "red" if time_diff < 0 else ("green" if time_diff > 0 else "black")
            )
            assignee = issue.get("assignee", "Kh√¥ng c√≥")

            # T√≠nh ph·∫ßn trƒÉm ch√™nh l·ªách
            time_estimate = issue["estimate"]
            time_spent = issue["spent"]
            if time_estimate > 0:
                diff_percentage = (time_diff / time_estimate) * 100
            else:
                diff_percentage = 0

            st.markdown(
                f"""
                <div style='margin-bottom: 10px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;'>
                    <div><b>{issue['key']}</b> - {issue['summary'][:50]}...</div>
                    <div>Assignee: {assignee}</div>
                    <div>Th·ªùi gian: {time_estimate:.1f}h ‚Üí {time_spent:.1f}h | Ch√™nh l·ªách: <span style='color: {time_diff_color}; font-weight: bold'>{time_diff_text}</span> ({diff_percentage:+.1f}%)</div>
                </div>
                """,
                unsafe_allow_html=True,
            )

    with diff_col2:
        st.subheader(
            "Ph√¢n b·ªë ch√™nh l·ªách",
            help="Ph√¢n b·ªë s·ªë l∆∞·ª£ng issue theo kho·∫£ng ch√™nh l·ªách th·ªùi gian",
        )

        # T·∫°o d·ªØ li·ªáu cho population pyramid
        positive_diffs = [x for x in time_diffs if x > 0]  # Thay ƒë·ªïi t·ª´ >= th√†nh >
        negative_diffs = [abs(x) for x in time_diffs if x < 0]

        # T·∫°o bins cho histogram
        max_value = max(max(positive_diffs, default=0), max(negative_diffs, default=0))
        if max_value == 0:
            max_value = 1  # ƒê·∫£m b·∫£o max_value lu√¥n l·ªõn h∆°n 0

        num_bins = 10
        bin_size = max(1, max_value / num_bins)  # ƒê·∫£m b·∫£o bin_size kh√¥ng bao gi·ªù = 0
        bins = [i * bin_size for i in range(num_bins + 1)]

        # T√≠nh histogram cho c·∫£ hai ph√≠a
        positive_hist, _ = np.histogram(positive_diffs, bins=bins)
        negative_hist, _ = np.histogram(negative_diffs, bins=bins)

        # T·∫°o bi·ªÉu ƒë·ªì population pyramid
        fig_dist = go.Figure()

        # Th√™m ph·∫ßn d∆∞∆°ng (b√™n ph·∫£i)
        fig_dist.add_trace(
            go.Bar(
                y=bins[:-1],
                x=positive_hist,
                orientation="h",
                name="Tr∆∞·ªõc h·∫°n",
                marker_color="green",
                text=positive_hist,
                textposition="auto",
            )
        )

        # Th√™m ph·∫ßn √¢m (b√™n tr√°i)
        fig_dist.add_trace(
            go.Bar(
                y=bins[:-1],
                x=[-x for x in negative_hist],
                orientation="h",
                name="Qu√° h·∫°n",
                marker_color="red",
                text=negative_hist,
                textposition="auto",
            )
        )

        # C·∫≠p nh·∫≠t layout
        fig_dist.update_layout(
            barmode="overlay",
            bargap=0.1,
            title="",
            xaxis_title="S·ªë l∆∞·ª£ng issue",
            yaxis_title="Ch√™nh l·ªách (gi·ªù)",
            showlegend=True,
            legend=dict(
                orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5
            ),
        )

        st.plotly_chart(fig_dist, use_container_width=True)

        # Hi·ªÉn th·ªã th·ªëng k√™ c∆° b·∫£n
        time_diffs = pd.Series(time_diffs)
        status_text = (
            "Done" if not include_other_done else "Done/Dev Done/Test Done/Deployed"
        )
        total_issues = len(done_issues)
        diff_issues = len(time_diffs)
        st.caption(
            f"Th·ªëng k√™ ({diff_issues}/{total_issues} issues {status_text} c√≥ ch√™nh l·ªách):"
        )
        stat_cols = st.columns(4)
        with stat_cols[0]:
            st.metric("Trung b√¨nh", f"{time_diffs.mean():.1f}h")
        with stat_cols[1]:
            st.metric("L·ªõn nh·∫•t", f"{time_diffs.max():.1f}h")
        with stat_cols[2]:
            st.metric("Nh·ªè nh·∫•t", f"{time_diffs.min():.1f}h")
        with stat_cols[3]:
            st.metric("Trung v·ªã", f"{time_diffs.median():.1f}h")


def display_performance_chart(filtered_issues):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë√°nh gi√° hi·ªáu su·∫•t c·ªßa c√°c assignee

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
    """
    st.subheader(
        "ƒê√°nh gi√° hi·ªáu su·∫•t Assignee",
        help="ƒê√°nh gi√° hi·ªáu su·∫•t l√†m vi·ªác c·ªßa t·ª´ng assignee",
    )

    # Th√™m toggle switch ƒë·ªÉ t√≠nh c·∫£ c√°c issue ƒë√£ ho√†n th√†nh kh√°c
    include_other_done = st.toggle(
        "T√≠nh c·∫£ issue Dev Done, Test Done, Deployed",
        value=True,
        help="Bao g·ªìm c√°c issue c√≥ tr·∫°ng th√°i Dev Done, Test Done, Deployed trong ƒë√°nh gi√° hi·ªáu su·∫•t",
    )

    # X√°c ƒë·ªãnh c√°c tr·∫°ng th√°i ƒë∆∞·ª£c coi l√† ho√†n th√†nh
    done_statuses = ["done"]
    if include_other_done:
        done_statuses.extend(["dev done", "test done", "deployed"])

    # Hi·ªÉn th·ªã c√°c tr·∫°ng th√°i ƒëang ƒë∆∞·ª£c t√≠nh
    status_text = (
        "Done" if not include_other_done else "Done/Dev Done/Test Done/Deployed"
    )
    st.caption(f"ƒê√°nh gi√° d·ª±a tr√™n c√°c issue c√≥ tr·∫°ng th√°i: {status_text}")

    # Ch·ªâ xem x√©t assignee c√≥ issue
    assignees = {}
    for issue in filtered_issues:
        assignee = issue.get("assignee", "Kh√¥ng c√≥")
        if assignee not in assignees:
            assignees[assignee] = {
                "total_issues": 0,
                "done_issues": 0,
                "total_estimate": 0,
                "total_spent": 0,
                "ahead_of_schedule": 0,  # S·ªë issue ho√†n th√†nh tr∆∞·ªõc h·∫°n
                "on_schedule": 0,  # S·ªë issue ho√†n th√†nh ƒë√∫ng h·∫°n
                "behind_schedule": 0,  # S·ªë issue ho√†n th√†nh tr·ªÖ h·∫°n
                "avg_time_per_issue": 0,  # Th·ªùi gian trung b√¨nh cho m·ªói issue
                "efficiency_score": 0,  # ƒêi·ªÉm hi·ªáu su·∫•t (t√≠nh sau)
            }

        # C·∫≠p nh·∫≠t s·ªë li·ªáu
        assignees[assignee]["total_issues"] += 1

        # Ki·ªÉm tra n·∫øu issue ƒë√£ ho√†n th√†nh (d·ª±a tr√™n danh s√°ch tr·∫°ng th√°i ƒë∆∞·ª£c ch·∫•p nh·∫≠n)
        issue_status = issue.get("status", "").lower()
        if issue_status in done_statuses:
            assignees[assignee]["done_issues"] += 1

            # T√≠nh tr·∫°ng th√°i deadline
            time_estimate = issue.get("time_estimate", 0)
            time_spent = issue.get("time_spent", 0)
            if time_estimate > time_spent:
                assignees[assignee]["ahead_of_schedule"] += 1
            elif time_estimate < time_spent:
                assignees[assignee]["behind_schedule"] += 1
            else:
                assignees[assignee]["on_schedule"] += 1

        # C·∫≠p nh·∫≠t th·ªùi gian
        assignees[assignee]["total_estimate"] += issue.get("time_estimate", 0)
        assignees[assignee]["total_spent"] += issue.get("time_spent", 0)

    # Lo·∫°i b·ªè assignee "Kh√¥ng c√≥" n·∫øu c√≥
    if "Kh√¥ng c√≥" in assignees:
        del assignees["Kh√¥ng c√≥"]

    # N·∫øu kh√¥ng c√≥ assignee n√†o
    if not assignees:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu assignee ƒë·ªÉ hi·ªÉn th·ªã.")
        return

    # T√≠nh to√°n c√°c ch·ªâ s·ªë hi·ªáu su·∫•t cho m·ªói assignee
    for assignee, data in assignees.items():
        # T·ª∑ l·ªá ho√†n th√†nh
        completion_rate = (
            data["done_issues"] / data["total_issues"]
            if data["total_issues"] > 0
            else 0
        )

        # ƒêi·ªÉm hi·ªáu qu·∫£ th·ªùi gian (1 = ƒë√∫ng th·ªùi gian, >1 = nhanh h∆°n, <1 = ch·∫≠m h∆°n)
        time_efficiency = (
            data["total_estimate"] / data["total_spent"]
            if data["total_spent"] > 0
            else 1
        )

        # T·ª∑ l·ªá ƒë√∫ng h·∫°n v√† tr∆∞·ªõc h·∫°n
        on_time_rate_raw = (
            (data["ahead_of_schedule"] + data["on_schedule"]) / data["done_issues"]
            if data["done_issues"] > 0
            else 0
        )

        # L∆∞u gi√° tr·ªã on_time_rate nh√¢n 10 cho bi·ªÉu ƒë·ªì radar (ƒë·ªÉ gi·ªØ t∆∞∆°ng th√≠ch)
        on_time_rate = on_time_rate_raw * 10

        # T·∫°o c√°c bi·∫øn issue_count v√† ahead_rate v·ªõi logic ƒë∆°n gi·∫£n h∆°n
        # Tr√°nh s·ª≠ d·ª•ng df_performance v√¨ ch∆∞a t·ªìn t·∫°i
        # Issue count s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫°i sau khi c√≥ df_performance
        data["issue_count"] = data["done_issues"]

        # T√≠nh ahead_rate ngay t·∫°i ƒë√¢y
        data["ahead_rate"] = (
            data["ahead_of_schedule"] / data["done_issues"]
            if data["done_issues"] > 0
            else 0
        ) * 10

        # Th·ªùi gian trung b√¨nh cho m·ªói issue ho√†n th√†nh
        data["avg_time_per_issue"] = (
            data["total_spent"] / data["done_issues"] if data["done_issues"] > 0 else 0
        )

        # T√≠nh h·ªá s·ªë tr·ªçng s·ªë kh·ªëi l∆∞·ª£ng d·ª±a tr√™n th·ªùi gian d·ª± ki·∫øn
        # ƒê·ªÉ bi·∫øt assignee n√†o ƒëang x·ª≠ l√Ω c√¥ng vi·ªác l·ªõn/nhi·ªÅu h∆°n
        avg_estimate_per_issue = (
            data["total_estimate"] / data["total_issues"]
            if data["total_issues"] > 0
            else 0
        )
        data["workload_factor"] = avg_estimate_per_issue

        # T√≠nh kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác ƒë√£ ho√†n th√†nh (t√≠nh theo % th·ªùi gian d·ª± ki·∫øn)
        completed_workload = 0
        if data["done_issues"] > 0:
            # T√≠nh theo % th·ªùi gian d·ª± ki·∫øn ƒë√£ ho√†n th√†nh
            estimate_done_ratio = (
                data["total_estimate"]
                / sum(
                    assignee_data["total_estimate"]
                    for assignee_data in assignees.values()
                )
                if sum(
                    assignee_data["total_estimate"]
                    for assignee_data in assignees.values()
                )
                > 0
                else 0
            )
            completed_workload = estimate_done_ratio * 10  # Thang ƒëi·ªÉm 0-10
            # Gi·ªõi h·∫°n max 10 ƒëi·ªÉm
            completed_workload = min(10, completed_workload)

        # T√≠nh ƒëi·ªÉm hi·ªáu su·∫•t t·ªïng h·ª£p (thang ƒëi·ªÉm 0-100)
        time_efficiency_capped = min(
            2, time_efficiency
        )  # Gi·ªõi h·∫°n t·ªëi ƒëa l√† 2 (g·∫•p ƒë√¥i hi·ªáu qu·∫£)

        # C√¥ng th·ª©c m·ªõi, bao g·ªìm tr·ªçng s·ªë cho kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác d·ª± ki·∫øn
        # 30% d·ª±a tr√™n t·ª∑ l·ªá ho√†n th√†nh
        # 30% d·ª±a tr√™n hi·ªáu qu·∫£ th·ªùi gian
        # 20% d·ª±a tr√™n t·ª∑ l·ªá ƒë√∫ng h·∫°n
        # 20% d·ª±a tr√™n kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác d·ª± ki·∫øn ƒë√£ ho√†n th√†nh
        data["efficiency_score"] = (
            (completion_rate * 30)
            + (min(1, time_efficiency_capped / 2) * 30)
            + (on_time_rate_raw * 20)  # S·ª≠ d·ª•ng t·ª∑ l·ªá g·ªëc, kh√¥ng nh√¢n 10
            + (min(1, completed_workload / 10) * 20)  # Chu·∫©n h√≥a v·ªÅ 0-1 v√† nh√¢n v·ªõi 20
        )

    # T·∫°o DataFrame cho hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√°nh gi√°
    performance_data = []
    for assignee, data in assignees.items():
        performance_data.append(
            {
                "Assignee": assignee,
                "T·ªïng s·ªë issue": data["total_issues"],
                "ƒê√£ ho√†n th√†nh": data["done_issues"],
                "T·ª∑ l·ªá ho√†n th√†nh": f"{(data['done_issues']/data['total_issues']*100) if data['total_issues'] > 0 else 0:.1f}%",
                "Tr∆∞·ªõc h·∫°n": data["ahead_of_schedule"],
                "ƒê√∫ng h·∫°n": data["on_schedule"],
                "Tr·ªÖ h·∫°n": data["behind_schedule"],
                "Th·ªùi gian d·ª± ki·∫øn (h)": data["total_estimate"],
                "Th·ªùi gian th·ª±c t·∫ø (h)": data["total_spent"],
                "TB d·ª± ki·∫øn/issue (h)": data["workload_factor"],
                "Ch√™nh l·ªách (h)": data["total_estimate"] - data["total_spent"],
                "ƒêi·ªÉm hi·ªáu su·∫•t": data["efficiency_score"],
            }
        )

    df_performance = pd.DataFrame(performance_data)

    # S·∫Øp x·∫øp DataFrame theo ƒëi·ªÉm hi·ªáu su·∫•t gi·∫£m d·∫ßn
    df_performance = df_performance.sort_values(by="ƒêi·ªÉm hi·ªáu su·∫•t", ascending=False)

    # T√¨m gi√° tr·ªã t·ªëi ƒëa c·ªßa s·ªë issue ho√†n th√†nh
    max_done_issues = (
        df_performance["ƒê√£ ho√†n th√†nh"].max() if not df_performance.empty else 1
    )

    # C·∫≠p nh·∫≠t l·∫°i issue_count cho t·∫•t c·∫£ assignee d·ª±a tr√™n max_done_issues
    for assignee, data in assignees.items():
        if max_done_issues > 0:
            data["issue_count"] = min(10, data["done_issues"] / max_done_issues * 10)

    # T·∫°o layout cho bi·ªÉu ƒë·ªì v√† b·∫£ng
    perf_col1, perf_col2 = st.columns([3, 2])

    with perf_col1:
        # T·∫°o bi·ªÉu ƒë·ªì so s√°nh ƒëi·ªÉm hi·ªáu su·∫•t
        fig = go.Figure()

        # Th√™m thanh ƒëi·ªÉm hi·ªáu su·∫•t t·ªïng h·ª£p
        fig.add_trace(
            go.Bar(
                x=df_performance["Assignee"],
                y=df_performance["ƒêi·ªÉm hi·ªáu su·∫•t"],
                name="ƒêi·ªÉm hi·ªáu su·∫•t",
                marker_color="#5470C6",
                text=df_performance["ƒêi·ªÉm hi·ªáu su·∫•t"].apply(lambda x: f"{x:.1f}"),
                textposition="auto",
            )
        )

        # Th√™m bi·ªÉu ƒë·ªì x·∫øp ch·ªìng cho t·ª∑ l·ªá ho√†n th√†nh
        fig.add_trace(
            go.Bar(
                x=df_performance["Assignee"],
                y=df_performance["T·ªïng s·ªë issue"],
                name="T·ªïng s·ªë issue",
                marker_color="#91CC75",
                opacity=0.7,
                visible="legendonly",  # M·∫∑c ƒë·ªãnh ·∫©n
            )
        )

        fig.add_trace(
            go.Bar(
                x=df_performance["Assignee"],
                y=df_performance["ƒê√£ ho√†n th√†nh"],
                name="ƒê√£ ho√†n th√†nh",
                marker_color="#73C0DE",
                opacity=0.7,
                visible="legendonly",  # M·∫∑c ƒë·ªãnh ·∫©n
            )
        )

        # C·∫•u h√¨nh layout
        fig.update_layout(
            title="ƒêi·ªÉm hi·ªáu su·∫•t l√†m vi·ªác c·ªßa Assignee",
            xaxis_title="Assignee",
            yaxis_title="ƒêi·ªÉm (0-100)",
            barmode="group",
            legend=dict(
                orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
            ),
            height=400,
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        st.plotly_chart(fig, use_container_width=True)

        # Th√™m bi·ªÉu ƒë·ªì radar cho top 5 assignee c√≥ ƒëi·ªÉm cao nh·∫•t
        top_assignees = df_performance.head(min(5, len(df_performance)))

        if len(top_assignees) > 1:  # Ch·ªâ v·∫Ω bi·ªÉu ƒë·ªì radar n·∫øu c√≥ √≠t nh·∫•t 2 assignee
            categories = [
                "T·ª∑ l·ªá ho√†n th√†nh",
                "Hi·ªáu qu·∫£ th·ªùi gian",
                "T·ª∑ l·ªá ƒë√∫ng h·∫°n",
                "S·ªë issue ƒë√£ l√†m",
                "Tr∆∞·ªõc h·∫°n",
            ]

            fig_radar = go.Figure()

            for i, row in top_assignees.iterrows():
                assignee = row["Assignee"]
                data = assignees[assignee]

                # Chu·∫©n h√≥a c√°c ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã tr√™n radar chart (thang ƒëi·ªÉm 0-10)
                completion_rate = (
                    data["done_issues"] / data["total_issues"]
                    if data["total_issues"] > 0
                    else 0
                ) * 10
                time_efficiency = min(
                    10,
                    (
                        data["total_estimate"] / data["total_spent"]
                        if data["total_spent"] > 0
                        else 1
                    )
                    * 5,
                )
                on_time_rate_raw = (
                    (data["ahead_of_schedule"] + data["on_schedule"])
                    / data["done_issues"]
                    if data["done_issues"] > 0
                    else 0
                )

                # L∆∞u gi√° tr·ªã on_time_rate nh√¢n 10 cho bi·ªÉu ƒë·ªì radar (ƒë·ªÉ gi·ªØ t∆∞∆°ng th√≠ch)
                on_time_rate = on_time_rate_raw * 10

                # S·ª≠ d·ª•ng gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c t√≠nh tr∆∞·ªõc ƒë√≥
                issue_count = data["issue_count"]
                ahead_rate = data["ahead_rate"]

                # Th√™m trace cho m·ªói assignee
                fig_radar.add_trace(
                    go.Scatterpolar(
                        r=[
                            completion_rate,
                            time_efficiency,
                            on_time_rate,
                            issue_count,
                            ahead_rate,
                        ],
                        theta=categories,
                        fill="toself",
                        name=assignee,
                    )
                )

            # C·∫•u h√¨nh layout cho radar chart
            fig_radar.update_layout(
                polar=dict(radialaxis=dict(visible=True, range=[0, 10])),
                showlegend=True,
                title="Ph√¢n t√≠ch hi·ªáu su·∫•t c·ªßa Top Assignee",
                height=400,
            )

            st.plotly_chart(fig_radar, use_container_width=True)

    with perf_col2:
        # Th√¥ng tin c√°c ch·ªâ s·ªë ƒë√°nh gi√°
        st.info(
            """
        **C√°c ch·ªâ s·ªë ƒë√°nh gi√° hi·ªáu su·∫•t:**
        
        - **ƒêi·ªÉm hi·ªáu su·∫•t**: Thang ƒëi·ªÉm 0-100, k·∫øt h·ª£p c√°c y·∫øu t·ªë:
          - 30% d·ª±a tr√™n t·ª∑ l·ªá ho√†n th√†nh
          - 30% d·ª±a tr√™n hi·ªáu qu·∫£ th·ªùi gian
          - 20% d·ª±a tr√™n t·ª∑ l·ªá ƒë√∫ng h·∫°n
          - 20% d·ª±a tr√™n kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác ƒë√£ ho√†n th√†nh
        
        - **Hi·ªáu qu·∫£ th·ªùi gian**: So s√°nh th·ªùi gian d·ª± ki·∫øn v√† th·ªùi gian th·ª±c t·∫ø
          - >1: L√†m nhanh h∆°n d·ª± ki·∫øn
          - =1: ƒê√∫ng th·ªùi gian d·ª± ki·∫øn
          - <1: L√†m ch·∫≠m h∆°n d·ª± ki·∫øn
          
        - **TB d·ª± ki·∫øn/issue**: Th·ªùi gian trung b√¨nh d·ª± ki·∫øn cho m·ªói issue
          (ch·ªâ s·ªë n√†y ph·∫£n √°nh ƒë·ªô ph·ª©c t·∫°p c√¥ng vi·ªác c·ªßa assignee)
        """
        )

        # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu hi·ªáu su·∫•t
        st.dataframe(
            df_performance[
                [
                    "Assignee",
                    "T·ªïng s·ªë issue",
                    "ƒê√£ ho√†n th√†nh",
                    "T·ª∑ l·ªá ho√†n th√†nh",
                    "Th·ªùi gian d·ª± ki·∫øn (h)",
                    "TB d·ª± ki·∫øn/issue (h)",
                    "Tr∆∞·ªõc h·∫°n",
                    "ƒê√∫ng h·∫°n",
                    "Tr·ªÖ h·∫°n",
                    "ƒêi·ªÉm hi·ªáu su·∫•t",
                ]
            ],
            use_container_width=True,
            hide_index=True,
        )


def display_time_analysis_by_user(filtered_issues):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n t√≠ch th·ªùi gian theo user

    Args:
        filtered_issues (list): Danh s√°ch issues ƒë√£ ƒë∆∞·ª£c l·ªçc
    """
    st.subheader(
        "Ph√¢n t√≠ch th·ªùi gian theo User",
        help="Ph√¢n t√≠ch th·ªùi gian ƒë√£ log theo t·ª´ng user, ph√¢n chia theo lo·∫°i issue",
    )

    # T·∫°o dictionary ƒë·ªÉ l∆∞u th·ªùi gian theo user
    user_time = {}

    # L·ªçc c√°c issue c√≥ sprint_time_spent
    issues_with_sprint_time = [
        issue for issue in filtered_issues if issue.get("sprint_time_spent", 0) > 0
    ]

    for issue in issues_with_sprint_time:
        assignee = issue.get("assignee", "Kh√¥ng c√≥")
        if assignee not in user_time:
            user_time[assignee] = {
                "non_dev": 0,  # Th·ªùi gian cho issue non-dev
                "popup": 0,  # Th·ªùi gian cho issue popup
                "development": 0,  # Th·ªùi gian cho issue development
                "issues": {  # L∆∞u danh s√°ch issues cho m·ªói lo·∫°i
                    "non_dev": [],
                    "popup": [],
                    "development": [],
                },
            }

        sprint_time_spent = issue.get("sprint_time_spent", 0)
        show_in_dashboard_value = issue.get("show_in_dashboard", "")
        show_in_dashboard = show_in_dashboard_value is True or (
            isinstance(show_in_dashboard_value, str)
            and show_in_dashboard_value.upper() == "YES"
        )
        popup_value = issue.get("popup", "")
        is_popup = popup_value is True or (
            isinstance(popup_value, str) and popup_value.upper() == "YES"
        )

        if not show_in_dashboard:
            user_time[assignee]["non_dev"] += sprint_time_spent
            user_time[assignee]["issues"]["non_dev"].append(issue)
        elif is_popup:
            user_time[assignee]["popup"] += sprint_time_spent
            user_time[assignee]["issues"]["popup"].append(issue)
        else:
            user_time[assignee]["development"] += sprint_time_spent
            user_time[assignee]["issues"]["development"].append(issue)

    # Lo·∫°i b·ªè user "Kh√¥ng c√≥" n·∫øu c√≥
    if "Kh√¥ng c√≥" in user_time:
        del user_time["Kh√¥ng c√≥"]

    if not user_time:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian ƒë·ªÉ ph√¢n t√≠ch.")
        return

    # T·∫°o DataFrame cho d·ªØ li·ªáu
    data = []
    for assignee, times in user_time.items():
        total_time = sum([times["non_dev"], times["popup"], times["development"]])
        data.append(
            {
                "Assignee": assignee,
                "Non-dev": times["non_dev"],
                "Popup": times["popup"],
                "Development": times["development"],
                "T·ªïng th·ªùi gian": total_time,
                "% Non-dev": (
                    (times["non_dev"] / total_time * 100) if total_time > 0 else 0
                ),
                "% Popup": (times["popup"] / total_time * 100) if total_time > 0 else 0,
                "% Development": (
                    (times["development"] / total_time * 100) if total_time > 0 else 0
                ),
            }
        )

    df_time = pd.DataFrame(data)

    # T·∫°o layout 2 c·ªôt

    # T·∫°o bi·ªÉu ƒë·ªì stacked bar
    fig = go.Figure()

    # Th√™m c√°c lo·∫°i th·ªùi gian
    fig.add_trace(
        go.Bar(
            name="Non-dev",
            x=df_time["Assignee"],
            y=df_time["Non-dev"],
            marker_color="#FF9999",
            text=df_time["% Non-dev"].apply(lambda x: f"{x:.1f}%"),
            textposition="auto",
            customdata=df_time[["Assignee", "Non-dev"]].values,
            hovertemplate="<b>%{customdata[0]}</b><br>"
            + "Th·ªùi gian: %{y:.1f}h<br>"
            + "T·ª∑ l·ªá: %{text}<br>"
            + "<extra></extra>",
        )
    )

    fig.add_trace(
        go.Bar(
            name="Popup",
            x=df_time["Assignee"],
            y=df_time["Popup"],
            marker_color="#FFCC99",
            text=df_time["% Popup"].apply(lambda x: f"{x:.1f}%"),
            textposition="auto",
            customdata=df_time[["Assignee", "Popup"]].values,
            hovertemplate="<b>%{customdata[0]}</b><br>"
            + "Th·ªùi gian: %{y:.1f}h<br>"
            + "T·ª∑ l·ªá: %{text}<br>"
            + "<extra></extra>",
        )
    )

    fig.add_trace(
        go.Bar(
            name="Development",
            x=df_time["Assignee"],
            y=df_time["Development"],
            marker_color="#99CC99",
            text=df_time["% Development"].apply(lambda x: f"{x:.1f}%"),
            textposition="auto",
            customdata=df_time[["Assignee", "Development"]].values,
            hovertemplate="<b>%{customdata[0]}</b><br>"
            + "Th·ªùi gian: %{y:.1f}h<br>"
            + "T·ª∑ l·ªá: %{text}<br>"
            + "<extra></extra>",
        )
    )

    # C·∫≠p nh·∫≠t layout
    fig.update_layout(
        barmode="stack",
        title="Ph√¢n b·ªë th·ªùi gian theo lo·∫°i issue",
        xaxis_title="Assignee",
        yaxis_title="Th·ªùi gian (gi·ªù)",
        height=400,
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        clickmode="event+select",
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)

    # # Th√™m selectbox ƒë·ªÉ ch·ªçn assignee v√† lo·∫°i th·ªùi gian
    # col1, col2 = st.columns(2)
    # with col1:
    #     selected_assignee = st.selectbox(
    #         "Ch·ªçn Assignee",
    #         options=df_time["Assignee"].tolist(),
    #         key="selected_assignee",
    #     )
    # with col2:
    #     selected_category = st.selectbox(
    #         "Ch·ªçn lo·∫°i th·ªùi gian",
    #         options=["non_dev", "popup", "development"],
    #         format_func=lambda x: {
    #             "non_dev": "Non-dev",
    #             "popup": "Popup",
    #             "development": "Development",
    #         }[x],
    #         key="selected_category",
    #     )

    # # Hi·ªÉn th·ªã danh s√°ch issues t∆∞∆°ng ·ª©ng
    # if selected_assignee and selected_category:
    #     selected_issues = user_time[selected_assignee]["issues"][selected_category]

    #     if selected_issues:
    #         st.subheader(
    #             f"Danh s√°ch issues c·ªßa {selected_assignee} - {selected_category}"
    #         )

    #         # T·∫°o DataFrame cho danh s√°ch issues
    #         issues_data = []
    #         for issue in selected_issues:
    #             issues_data.append(
    #                 {
    #                     "Key": issue.get("key", ""),
    #                     "Summary": issue.get("summary", ""),
    #                     "Status": issue.get("status", ""),
    #                     "Th·ªùi gian (h)": issue.get("sprint_time_spent", 0),
    #                     "Show in Dashboard": issue.get("show_in_dashboard", ""),
    #                     "Popup": issue.get("popup", ""),
    #                 }
    #             )

    #         df_selected = pd.DataFrame(issues_data)
    #         st.dataframe(df_selected, use_container_width=True, hide_index=True)
    #     else:
    #         st.info(
    #             f"Kh√¥ng c√≥ issues n√†o cho {selected_assignee} trong danh m·ª•c {selected_category}"
    #         )

    # with time_col2:
    #     # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu chi ti·∫øt
    #     st.dataframe(
    #         df_time[
    #             [
    #                 "Assignee",
    #                 "T·ªïng th·ªùi gian",
    #                 "Non-dev",
    #                 "Popup",
    #                 "Development",
    #                 "% Non-dev",
    #                 "% Popup",
    #                 "% Development",
    #             ]
    #         ].round(1),
    #         use_container_width=True,
    #         hide_index=True,
    #     )


def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    st.title("B√°o C√°o Sprint")

    # Kh·ªüi t·∫°o service
    sprint_service = SprintReportService()

    # Hi·ªÉn th·ªã d·ª± √°n ƒëang s·ª≠ d·ª•ng
    st.toast(f"ƒêang s·ª≠ d·ª•ng d·ª± √°n: {DEFAULT_PROJECT}", icon="üîç")

    # Ki·ªÉm tra k·∫øt n·ªëi MongoDB
    mongo_available = sprint_service.mongo_client.is_connected()
    if mongo_available:
        st.toast("K·∫øt n·ªëi ƒë·∫øn MongoDB th√†nh c√¥ng!", icon="‚úÖ")

    else:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh k·∫øt n·ªëi!")
        st.stop()

    # T·∫£i danh s√°ch sprint t·ª´ API
    with st.spinner("ƒêang t·∫£i danh s√°ch sprint t·ª´ Jira API..."):
        # Ki·ªÉm tra xem sprints ƒë√£ c√≥ trong session_state ch∆∞a
        if "sprints" not in st.session_state:
            st.session_state.sprints = sprint_service.get_all_sprints(DEFAULT_PROJECT)
        sprints = st.session_state.sprints

    if not sprints:
        st.error(f"Kh√¥ng t√¨m th·∫•y sprint n√†o cho d·ª± √°n {DEFAULT_PROJECT}")
        st.stop()

    # Format sprint options cho dropdown selection
    sprint_options = []
    active_sprint_index = 0  # M·∫∑c ƒë·ªãnh l√† sprint ƒë·∫ßu ti√™n

    for i, sprint in enumerate(sprints):
        state = sprint.get("state", "unknown").upper()
        name = sprint.get("name", "Unnamed Sprint")
        option = f"{name} ({state})"
        sprint_options.append(
            {
                "display": option,
                "id": sprint.get("id"),
                "board_id": sprint.get("originBoardId"),
                "data": sprint,
            }
        )

        # N·∫øu sprint ƒëang active, ghi nh·ªõ v·ªã tr√≠
        if sprint.get("state") == "active":
            active_sprint_index = i

    # S·∫Øp x·∫øp sprints: Active first, then by name
    sprint_options.sort(
        key=lambda x: (
            (
                0
                if x["data"].get("state") == "active"
                else (1 if x["data"].get("state") == "future" else 2)
            ),
            x["data"].get("name", ""),
        )
    )

    # T√¨m l·∫°i v·ªã tr√≠ c·ªßa sprint active sau khi s·∫Øp x·∫øp
    for i, sprint in enumerate(sprint_options):
        if sprint["data"].get("state") == "active":
            active_sprint_index = i
            break

    # Selection v·ªõi sprint active ƒë∆∞·ª£c ch·ªçn m·∫∑c ƒë·ªãnh
    selected_sprint_idx = st.selectbox(
        "Ch·ªçn Sprint",
        options=range(len(sprint_options)),
        format_func=lambda i: sprint_options[i]["display"],
        index=active_sprint_index,  # M·∫∑c ƒë·ªãnh ch·ªçn sprint ƒëang active
        key="selected_sprint_idx",
    )

    selected_sprint = sprint_options[selected_sprint_idx]
    sprint_id = selected_sprint["id"]

    # L·∫•y d·ªØ li·ªáu issues t·ª´ MongoDB ngay khi ch·ªçn sprint
    # Ki·ªÉm tra xem sprint_id hi·ªán t·∫°i c√≥ kh√°c v·ªõi sprint_id ƒë√£ l∆∞u kh√¥ng
    should_reload_data = (
        "current_sprint_id" not in st.session_state
        or st.session_state.current_sprint_id != sprint_id
        or "issues" not in st.session_state
    )

    if should_reload_data:
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ MongoDB..."):
            issues = sprint_service.get_sprint_issues_from_mongo(sprint_id)
            st.session_state.issues = issues
            st.session_state.current_sprint_id = sprint_id

            # C≈©ng t·∫£i th√¥ng tin sprint t·ª´ MongoDB
            sprint_mongo_info = sprint_service.get_sprint_info_from_mongo(sprint_id)
            st.session_state.sprint_mongo_info = sprint_mongo_info
    else:
        issues = st.session_state.issues
        sprint_mongo_info = st.session_state.sprint_mongo_info

    if not issues:
        st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho sprint n√†y trong MongoDB!")
        st.info(
            "Vui l√≤ng ƒë·ªìng b·ªô d·ªØ li·ªáu sprint n√†y trong trang **ƒê·ªìng b·ªô d·ªØ li·ªáu** tr∆∞·ªõc khi xem b√°o c√°o."
        )
        st.stop()

    # Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng n·∫øu c√≥
    if sprint_mongo_info and "updated_at" in sprint_mongo_info:
        updated_at = sprint_mongo_info["updated_at"]
        # Hi·ªÉn th·ªã th·ªùi gian theo m√∫i gi·ªù GMT+0
        if isinstance(updated_at, datetime):
            # N·∫øu th·ªùi gian ƒë√£ c√≥ th√¥ng tin timezone
            if updated_at.tzinfo is not None:
                # Chuy·ªÉn sang m√∫i gi·ªù UTC (GMT+0)
                utc_tz = pytz.timezone("UTC")
                updated_at = updated_at.astimezone(utc_tz)
            else:
                # N·∫øu kh√¥ng c√≥ th√¥ng tin timezone, gi·∫£ ƒë·ªãnh th·ªùi gian ƒë√£ l√† UTC
                # Ch·ªâ c·∫ßn g√°n nh√£n UTC cho n√≥
                utc_tz = pytz.timezone("UTC")
                updated_at = utc_tz.localize(updated_at)

            formatted_time = updated_at.strftime("%d/%m/%Y %H:%M:%S")
            st.info(f"D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {formatted_time}")

    # T·∫°o tabs cho c√°c lo·∫°i b√°o c√°o kh√°c nhau
    tab1, tab2 = st.tabs(["üìä B√°o c√°o Sprint", "‚è±Ô∏è Ph√¢n t√≠ch th·ªùi gian"])

    with tab1:
        # Th√™m b·ªô l·ªçc show_in_dashboard_final v√† include_todo trong c√πng m·ªôt h√†ng
        filter_col1, filter_col2 = st.columns(2)

        with filter_col1:
            show_dashboard_final = st.toggle(
                "Ch·ªâ hi·ªÉn th·ªã issues c√≥ Show In Dashboard Final",
                value=True,
                key="show_dashboard_final_tab1",
            )

        with filter_col2:
            include_todo = st.toggle(
                "B·ªï sung issues To Do c√≥ Show In Dashboard",
                value=False,
                help="B·ªï sung c√°c issue c√≥ tr·∫°ng th√°i To Do v√† c√≥ Show In Dashboard v√†o danh s√°ch",
                key="include_todo_tab1",
            )

        # L·ªçc issues theo show_in_dashboard_final v√† include_todo
        if show_dashboard_final:
            issues_final = [
                issue for issue in issues if issue.get("show_in_dashboard_final", False)
            ]
            # N·∫øu include_todo ƒë∆∞·ª£c b·∫≠t, b·ªï sung th√™m c√°c issue To Do c√≥ show_in_dashboard
            if include_todo:
                todo_issues = [
                    issue
                    for issue in issues
                    if issue.get("status") == "To Do"
                    and issue.get("show_in_dashboard", False)
                    and not issue.get("show_in_dashboard_final", False)
                ]
                issues_final.extend(todo_issues)

            # Th√™m c√°c issue c√≥ log time v√† SHOW IN DASHBOARD = YES
            additional_issues = [
                issue
                for issue in issues
                if issue.get("show_in_dashboard", False)
                and issue.get("time_spent", 0) > 0  # C√≥ log time
                and not issue.get(
                    "show_in_dashboard_final", False
                )  # Ch∆∞a c√≥ trong danh s√°ch
                and issue.get("status") != "To Do"  # Kh√¥ng ph·∫£i issue To Do
            ]
            issues_final.extend(additional_issues)

            if not issues_final:
                st.warning("Kh√¥ng c√≥ issue n√†o th·ªèa m√£n ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã!")
                st.stop()
        else:
            issues_final = issues

        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa sprint trong b·ªë c·ª•c c·ªôt
        st.subheader(
            f"Sprint: {selected_sprint['data'].get('name', '')} ({selected_sprint['data'].get('state', '').upper()})"
        )

        # L·∫•y th√¥ng tin th·ªùi gian c·ªßa sprint
        start_date_str = selected_sprint["data"].get("startDate", "")
        end_date_str = selected_sprint["data"].get("endDate", "")

        # Format th·ªùi gian hi·ªÉn th·ªã theo GMT+7
        start_date = format_date(start_date_str)
        end_date = format_date(end_date_str)

        # T√≠nh s·ªë ng√†y c√≤n l·∫°i v√† ti·∫øn ƒë·ªô sprint
        days_remaining = calculate_days_remaining(end_date_str)
        progress_percent = calculate_sprint_progress(start_date_str, end_date_str)

        # B·ªë tr√≠ th√¥ng tin sprint th√†nh 2 c·ªôt
        col1, col2 = st.columns(2)

        with col1:
            if start_date and end_date:
                st.write(f"**Th·ªùi gian:** {start_date} ‚Üí {end_date}")
            if days_remaining is not None:
                if days_remaining >= 0:
                    st.write(f"**Ng√†y c√≤n l·∫°i:** {days_remaining} ng√†y")
                else:
                    st.write(f"**Qu√° h·∫°n:** {abs(days_remaining)} ng√†y")

        with col2:
            goal = selected_sprint["data"].get("goal", "")
            if goal:
                st.write(f"**M·ª•c ti√™u:** {goal}")

        # Hi·ªÉn th·ªã thanh ti·∫øn ƒë·ªô th·ªùi gian
        if progress_percent is not None:
            st.write("**Ti·∫øn ƒë·ªô th·ªùi gian sprint:**")
            progress_color = "normal"
            if progress_percent > 80:
                progress_color = "red"
            elif progress_percent > 50:
                progress_color = "orange"

            st.progress(progress_percent / 100, text=f"{progress_percent:.1f}%")

            if progress_percent < 100:
                elapsed_text = f"ƒê√£ tr√¥i qua {progress_percent:.1f}% th·ªùi gian sprint"
            else:
                elapsed_text = "Sprint ƒë√£ k·∫øt th√∫c"
            st.caption(elapsed_text)

        # Th√™m b·ªô l·ªçc dev_group v√† assignee trong c√πng m·ªôt h√†ng
        filter_col1, filter_col2 = st.columns(2)

        with filter_col1:
            dev_groups = ["DEV FULL + DEV FE", "DEV FULL", "DEV FE", "NON DEV"]
            selected_dev_group = st.selectbox(
                "L·ªçc theo nh√≥m developer",
                options=dev_groups,
                index=0,  # M·∫∑c ƒë·ªãnh l√† "DEV FULL + DEV FE"
            )

        with filter_col2:
            # L·∫•y danh s√°ch assignee t·ª´ issues_final
            assignees = sorted(
                list(
                    set(
                        issue.get("assignee", "")
                        for issue in issues_final
                        if issue.get("assignee")
                    )
                )
            )
            assignees.insert(0, "T·∫•t c·∫£")  # Th√™m option "T·∫•t c·∫£" v√†o ƒë·∫ßu danh s√°ch
            selected_assignee = st.selectbox(
                "L·ªçc theo Assignee", options=assignees, index=0
            )

        # L·ªçc issues theo dev_group v√† assignee ƒë√£ ch·ªçn
        filtered_issues = [
            issue
            for issue in issues_final
            if (
                selected_dev_group == "DEV FULL + DEV FE"
                and issue.get("dev_group") in ["DEV FULL", "DEV FE"]
            )
            or issue.get("dev_group") == selected_dev_group
            and (
                selected_assignee == "T·∫•t c·∫£"
                or issue.get("assignee") == selected_assignee
            )
        ]

        # Hi·ªÉn th·ªã th·ªëng k√™
        st.subheader("Th·ªëng k√™")

        stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)

        with stat_col1:
            total_issues = len(filtered_issues)
            done_issues = len(
                [
                    issue
                    for issue in filtered_issues
                    if issue.get("status", "").lower() in ["done"]
                ]
            )
            st.metric(
                "T·ªïng s·ªë issue Done",
                f"{done_issues}/{total_issues} ({(done_issues/total_issues)*100:.1f}%)",
            )

        with stat_col2:
            dev_done_issues = len(
                [
                    issue
                    for issue in filtered_issues
                    if issue.get("status", "").lower()
                    in ["dev done", "test done", "deployed", "done"]
                ]
            )
            st.metric(
                "S·ªë issue dev done",
                f"{dev_done_issues}/{total_issues} ({(dev_done_issues/total_issues)*100:.1f}%)",
            )

        with stat_col3:
            popup_issues = len(
                [issue for issue in filtered_issues if issue.get("popup") is True]
            )
            st.metric(
                "S·ªë issue Popup",
                f"{popup_issues}/{total_issues} ({(popup_issues/total_issues)*100:.1f}%)",
            )

        with stat_col4:
            dashboard_final_issues = len(
                [
                    issue
                    for issue in filtered_issues
                    if issue.get("show_in_dashboard_final") is True
                ]
            )
            st.metric("S·ªë issue Dashboard Final", dashboard_final_issues)

        # Hi·ªÉn th·ªã danh s√°ch issues
        if filtered_issues:
            # Hi·ªÉn th·ªã Burn Down Chart
            display_burndown_chart(
                filtered_issues,
                selected_sprint["data"].get("startDate", ""),
                selected_sprint["data"].get("endDate", ""),
            )
            # Hi·ªÉn th·ªã Status Chart
            display_status_chart(filtered_issues)

            # Hi·ªÉn th·ªã ph√¢n b·ªë theo lo·∫°i issue v√† customer
            display_distribution_charts(filtered_issues)

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë√°nh gi√° hi·ªáu su·∫•t c·ªßa assignee
            display_performance_chart(filtered_issues)

            # Hi·ªÉn th·ªã ph√¢n b·ªë ch√™nh l·ªách th·ªùi gian
            display_time_diff_charts(
                filtered_issues, show_dashboard_final, include_todo
            )

            # Hi·ªÉn th·ªã danh s√°ch c√°c issues ƒë√£ l·ªçc
            st.subheader("Danh s√°ch c√°c issues ƒë√£ l·ªçc")

            # T·∫°o expander ƒë·ªÉ kh√¥ng chi·∫øm qu√° nhi·ªÅu kh√¥ng gian tr√™n trang
            with st.expander("Nh·∫•n ƒë·ªÉ xem danh s√°ch chi ti·∫øt", expanded=False):
                # Chuy·ªÉn danh s√°ch issues sang DataFrame
                df_issues = pd.DataFrame(filtered_issues)

                # Hi·ªÉn th·ªã DataFrame
                st.dataframe(
                    df_issues,
                    use_container_width=True,
                    height=500,
                    hide_index=True,
                )

                # Th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng issues ƒëang hi·ªÉn th·ªã
                st.caption(
                    f"Hi·ªÉn th·ªã {len(filtered_issues)} issues t·ª´ t·ªïng s·ªë {len(issues_final)} trong filter hi·ªán t·∫°i."
                )

        else:
            st.info(f"Kh√¥ng c√≥ issue n√†o thu·ªôc nh√≥m {selected_dev_group}")

    with tab2:
        # Hi·ªÉn th·ªã ph√¢n t√≠ch th·ªùi gian theo user
        display_time_analysis_by_user(issues)


def format_date(date_str):
    """Format ISO date string sang ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc h∆°n theo m√∫i gi·ªù GMT+7

    Args:
        date_str (str): Chu·ªói ng√†y ƒë·ªãnh d·∫°ng ISO

    Returns:
        str: Chu·ªói ng√†y ƒë√£ ƒë·ªãnh d·∫°ng
    """
    if not date_str:
        return ""

    try:
        # Chuy·ªÉn ƒë·ªïi chu·ªói ISO sang ƒë·ªëi t∆∞·ª£ng datetime v·ªõi timezone
        date_obj = datetime.fromisoformat(date_str.replace("Z", "+00:00"))

        # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù GMT+7 (Asia/Ho_Chi_Minh)
        vietnam_tz = pytz.timezone("Asia/Ho_Chi_Minh")
        date_obj = date_obj.astimezone(vietnam_tz)

        # ƒê·ªãnh d·∫°ng ng√†y gi·ªù
        return date_obj.strftime("%d/%m/%Y %H:%M")
    except Exception:
        return date_str


if __name__ == "__main__":
    main()
