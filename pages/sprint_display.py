import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta
import io
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Set page configuration if this is a standalone page
if __name__ == "__main__":
    st.set_page_config(
        page_title="Sprint Analysis",
        page_icon="üìà",
        layout="wide",
        initial_sidebar_state="expanded",
    )

# C·∫•u h√¨nh danh s√°ch t√™n ng∆∞·ªùi d√πng s·∫Ω b·ªã lo·∫°i b·ªè kh·ªèi ph√¢n t√≠ch hi·ªáu su·∫•t
EXCLUDED_USERS = [
    "Kh√¥ng ƒë∆∞·ª£c giao",
    "Unassigned",
    "Nguy·ªÖn Xu√¢n Ho√†",
]  # Th√™m t√™n ng∆∞·ªùi d√πng c·∫ßn lo·∫°i b·ªè v√†o ƒë√¢y


def get_issue_key(issue):
    """L·∫•y key c·ªßa issue"""
    return issue.get("key", "Unknown")


def get_issue_summary(issue):
    """L·∫•y summary c·ªßa issue"""
    return issue.get("fields", {}).get("summary", "Kh√¥ng c√≥ t√≥m t·∫Øt")


def get_issue_type(issue):
    """L·∫•y lo·∫°i issue"""
    return issue.get("fields", {}).get("issuetype", {}).get("name", "Kh√¥ng r√µ")


def is_subtask(issue):
    """Ki·ªÉm tra xem issue c√≥ ph·∫£i l√† subtask kh√¥ng"""
    return issue.get("fields", {}).get("issuetype", {}).get("subtask", False)


def get_issue_status(issue):
    """L·∫•y tr·∫°ng th√°i c·ªßa issue"""
    return issue.get("fields", {}).get("status", {}).get("name", "Kh√¥ng r√µ")


def get_assignee(issue):
    """L·∫•y ng∆∞·ªùi ƒë∆∞·ª£c g√°n cho issue"""
    if issue.get("fields", {}).get("assignee"):
        return (
            issue.get("fields", {})
            .get("assignee", {})
            .get("displayName", "Kh√¥ng ƒë∆∞·ª£c giao")
        )
    return "Kh√¥ng ƒë∆∞·ª£c giao"


def is_popup(issue):
    """Ki·ªÉm tra xem issue c√≥ ph·∫£i l√† popup kh√¥ng"""
    customfield = issue.get("fields", {}).get("customfield_10130")
    if customfield and customfield.get("value") == "YES":
        return True
    return False


def get_time_original_estimate(issue):
    """L·∫•y th·ªùi gian ∆∞·ªõc t√≠nh ban ƒë·∫ßu"""
    return issue.get("fields", {}).get("timeoriginalestimate", 0) or 0


def get_time_spent(issue):
    """L·∫•y th·ªùi gian ƒë√£ s·ª≠ d·ª•ng"""
    return issue.get("fields", {}).get("timespent", 0) or 0


def calculate_remaining_estimate(issue):
    """T√≠nh to√°n th·ªùi gian c√≤n l·∫°i"""
    original = get_time_original_estimate(issue)
    spent = get_time_spent(issue)
    # ƒê·∫£m b·∫£o c·∫£ hai gi√° tr·ªã ƒë·ªÅu l√† s·ªë
    original = 0 if original is None else original
    spent = 0 if spent is None else spent
    return max(0, original - spent)


def create_issues_dataframe(issues):
    """
    T·∫°o DataFrame t·ª´ danh s√°ch issues c·ªßa Jira

    Args:
        issues (list): Danh s√°ch c√°c issue t·ª´ Jira API

    Returns:
        pd.DataFrame: DataFrame ch·ª©a th√¥ng tin c√°c issue ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    """
    # T·∫°o danh s√°ch c√°c dictionary ch·ª©a th√¥ng tin ƒë√£ x·ª≠ l√Ω
    processed_issues = []

    for issue in issues:
        processed_issue = {
            "key": get_issue_key(issue),
            "summary": get_issue_summary(issue),
            "issuetype": get_issue_type(issue),
            "is_subtask": is_subtask(issue),
            "status": get_issue_status(issue),
            "assignee": get_assignee(issue),
            "is_popup": is_popup(issue),
            "timeoriginalestimate": get_time_original_estimate(issue),
            "timespent": get_time_spent(issue),
            "remainingestimate": calculate_remaining_estimate(issue),
        }
        processed_issues.append(processed_issue)

    return pd.DataFrame(processed_issues)


def display_sprint_metrics(df_issues, sprint):
    """
    Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ph√¢n t√≠ch cho sprint

    Args:
        df_issues (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin c√°c issue
        sprint (dict): Th√¥ng tin v·ªÅ sprint
    """
    # ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i ho√†n th√†nh
    done_statuses = ["Dev Done", "Test Done", "Deployed", "Done"]

    # Ph√¢n lo·∫°i task
    tasks = df_issues[
        (df_issues["issuetype"] != "Epic") & (df_issues["is_subtask"] == False)
    ]
    subtasks = df_issues[df_issues["is_subtask"] == True]

    # T√≠nh to√°n s·ªë l∆∞·ª£ng task ho√†n th√†nh
    tasks_done = tasks[tasks["status"].isin(done_statuses)]
    subtasks_done = subtasks[subtasks["status"].isin(done_statuses)]

    # T√≠nh to√°n th·ªùi gian
    total_estimate = df_issues["timeoriginalestimate"].sum()
    total_spent = df_issues["timespent"].sum()
    total_remaining = df_issues["remainingestimate"].sum()

    # Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ gi√¢y sang gi·ªù
    total_estimate_hours = total_estimate / 3600
    total_spent_hours = total_spent / 3600
    total_remaining_hours = total_remaining / 3600

    # T√≠nh t·ª∑ l·ªá th·ªùi gian ƒë√£ s·ª≠ d·ª•ng v√† c√≤n l·∫°i
    time_progress = (total_spent / total_estimate * 100) if total_estimate > 0 else 0
    time_efficiency = (
        (total_spent / (total_spent + total_remaining) * 100)
        if (total_spent + total_remaining) > 0
        else 0
    )

    # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian
    st.subheader("‚è±Ô∏è Th·ªùi gian Sprint")

    # X·ª≠ l√Ω th√¥ng tin th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c sprint
    start_date = None
    end_date = None
    days_remaining = None

    if sprint.get("startDate") and sprint.get("endDate"):
        try:
            # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh ƒë·ªëi t∆∞·ª£ng datetime
            start_date = datetime.strptime(
                sprint.get("startDate"), "%Y-%m-%dT%H:%M:%S.%fZ"
            )
            end_date = datetime.strptime(sprint.get("endDate"), "%Y-%m-%dT%H:%M:%S.%fZ")

            # T√≠nh s·ªë ng√†y c√≤n l·∫°i
            now = datetime.now()
            if now < end_date:
                days_remaining = (end_date - now).days
            else:
                days_remaining = 0
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch th·ªùi gian sprint: {str(e)}")

    # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian sprint
    if start_date and end_date:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Ng√†y b·∫Øt ƒë·∫ßu", start_date.strftime("%d/%m/%Y"))
        with col2:
            st.metric("Ng√†y k·∫øt th√∫c", end_date.strftime("%d/%m/%Y"))
        with col3:
            if days_remaining is not None:
                st.metric("S·ªë ng√†y c√≤n l·∫°i", f"{days_remaining} ng√†y")

        # T√≠nh t·ªïng s·ªë ng√†y c·ªßa sprint v√† s·ªë ng√†y ƒë√£ tr√¥i qua
        total_days = (end_date - start_date).days
        days_passed = (
            (datetime.now() - start_date).days if datetime.now() > start_date else 0
        )
        days_passed = min(
            days_passed, total_days
        )  # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° t·ªïng s·ªë ng√†y

        # Hi·ªÉn th·ªã thanh ti·∫øn ƒë·ªô th·ªùi gian c·ªßa sprint
        if total_days > 0:
            sprint_progress = days_passed / total_days
            st.write("Ti·∫øn ƒë·ªô th·ªùi gian sprint:")
            st.progress(sprint_progress)

    # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian l√†m vi·ªác
    st.write("#### Th·ªùi gian l√†m vi·ªác")
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.metric("Th·ªùi gian ∆∞·ªõc t√≠nh", f"{total_estimate_hours:.1f} gi·ªù")
    with col2:
        st.metric("Th·ªùi gian ƒë√£ s·ª≠ d·ª•ng", f"{total_spent_hours:.1f} gi·ªù")
    with col3:
        st.metric("Th·ªùi gian c√≤n l·∫°i", f"{total_remaining_hours:.1f} gi·ªù")
    with col4:
        st.metric("T·ª∑ l·ªá th·ªùi gian ƒë√£ s·ª≠ d·ª•ng", f"{time_progress:.1f}%")
    with col5:
        st.metric("Hi·ªáu su·∫•t th·ªùi gian", f"{time_efficiency:.1f}%")

    # Hi·ªÉn th·ªã metrics
    st.subheader("üìä Ch·ªâ s·ªë Sprint")

    # T√≠nh to√°n s·ªë l∆∞·ª£ng task popup
    popup_tasks = tasks[tasks["is_popup"] == True]
    popup_tasks_done = popup_tasks[popup_tasks["status"].isin(done_statuses)]

    total_tasks = len(tasks)
    total_tasks_done = len(tasks_done)
    total_popup_tasks = len(popup_tasks)

    percent_tasks_done = (
        (total_tasks_done / total_tasks * 100) if total_tasks > 0 else 0
    )
    percent_popup = (total_popup_tasks / total_tasks * 100) if total_tasks > 0 else 0

    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ task popup
    col1, col2 = st.columns(2)

    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ task v√† subtask
    st.write("#### Th√¥ng tin Task v√† Subtask")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(
            "Tasks ho√†n th√†nh",
            f"{total_tasks_done}/{total_tasks} ({percent_tasks_done:.0f}%)",
        )

    with col2:
        total_subtasks = len(subtasks)
        total_subtasks_done = len(subtasks_done)
        percent_subtasks_done = (
            (total_subtasks_done / total_subtasks * 100) if total_subtasks > 0 else 0
        )

        st.metric(
            "Sub-tasks ho√†n th√†nh",
            f"{total_subtasks_done}/{total_subtasks} ({percent_subtasks_done:.0f}%)",
        )

    with col3:
        st.metric(
            "Task Popup",
            f"{total_popup_tasks}/{total_tasks} ({percent_popup:.0f}%)",
            help="S·ªë l∆∞·ª£ng task popup so v·ªõi t·ªïng s·ªë task",
        )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì so s√°nh ti·∫øn ƒë·ªô c√¥ng vi·ªác v√† ti·∫øn ƒë·ªô th·ªùi gian
    st.subheader("üìà So s√°nh ti·∫øn ƒë·ªô c√¥ng vi·ªác v√† ti·∫øn ƒë·ªô th·ªùi gian")

    # T√≠nh t·ª∑ l·ªá c√¥ng vi·ªác ho√†n th√†nh (d·ª±a tr√™n s·ªë l∆∞·ª£ng task v√† subtask)
    total_issues = total_tasks + total_subtasks
    total_issues_done = total_tasks_done + total_subtasks_done
    work_progress = (total_issues_done / total_issues * 100) if total_issues > 0 else 0

    # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
    progress_data = pd.DataFrame(
        {
            "Lo·∫°i": ["Ti·∫øn ƒë·ªô c√¥ng vi·ªác", "Ti·∫øn ƒë·ªô th·ªùi gian"],
            "Ph·∫ßn trƒÉm": [work_progress, time_progress],
        }
    )

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.bar(
        progress_data["Lo·∫°i"], progress_data["Ph·∫ßn trƒÉm"], color=["#4CAF50", "#2196F3"]
    )

    # Th√™m nh√£n gi√° tr·ªã
    for bar in bars:
        height = bar.get_height()
        ax.text(
            bar.get_x() + bar.get_width() / 2.0,
            height + 1,
            f"{height:.1f}%",
            ha="center",
            va="bottom",
        )

    # Th√™m ƒë∆∞·ªùng tham chi·∫øu 100%
    ax.axhline(y=100, color="black", linestyle="--", alpha=0.7)

    ax.set_ylim(0, 110)
    ax.set_ylabel("Ph·∫ßn trƒÉm (%)")
    ax.set_title("So s√°nh ti·∫øn ƒë·ªô c√¥ng vi·ªác v√† ti·∫øn ƒë·ªô th·ªùi gian")

    plt.tight_layout()
    st.pyplot(fig)


def display_team_performance(df_issues):
    """
    Hi·ªÉn th·ªã hi·ªáu su·∫•t c·ªßa team v√† t·ª´ng ng∆∞·ªùi

    Args:
        df_issues (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin c√°c issue
    """
    # ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i ho√†n th√†nh
    done_statuses = ["Dev Done", "Test Done", "Deployed", "Done"]

    # L·ªçc c√°c task (kh√¥ng ph·∫£i Epic v√† kh√¥ng ph·∫£i subtask)
    tasks = df_issues[
        (df_issues["issuetype"] != "Epic")
    ]

    # T√≠nh to√°n hi·ªáu su·∫•t theo ng∆∞·ªùi
    st.subheader("üë• Hi·ªáu su·∫•t team")

    # T·∫°o DataFrame hi·ªáu su·∫•t theo ng∆∞·ªùi
    user_performance = []

    for assignee in tasks["assignee"].unique():
        # B·ªè qua nh·ªØng ng∆∞·ªùi d√πng trong danh s√°ch lo·∫°i tr·ª´
        if assignee in EXCLUDED_USERS:
            continue

        user_tasks = tasks[tasks["assignee"] == assignee]
        user_tasks_done = user_tasks[user_tasks["status"].isin(done_statuses)]

        total_tasks = len(user_tasks)
        total_done = len(user_tasks_done)
        completion_rate = (total_done / total_tasks * 100) if total_tasks > 0 else 0

        total_estimate = user_tasks["timeoriginalestimate"].sum()
        total_spent = user_tasks["timespent"].sum()

        # T√≠nh t·ª∑ l·ªá th·ªùi gian s·ª≠ d·ª•ng so v·ªõi ∆∞·ªõc t√≠nh
        time_efficiency = (
            (total_spent / total_estimate * 100) if total_estimate > 0 else 0
        )

        # T√≠nh th·ªùi gian c√≤n l·∫°i
        time_remaining = total_estimate - total_spent

        user_performance.append(
            {
                "Assignee": assignee,
                "Tasks": total_tasks,
                "Done": total_done,
                "Completion Rate": f"{completion_rate:.0f}%",
                "Original Estimate (h)": f"{total_estimate/3600:.1f}",
                "Time Spent (h)": f"{total_spent/3600:.1f}",
                "Time Efficiency": f"{time_efficiency:.0f}%",
                "Time Efficiency Numeric": time_efficiency,
                "Completion Rate Numeric": completion_rate,
                "Original Estimate": total_estimate,
                "Time Spent": total_spent,
                "Time Remaining (h)": f"{time_remaining/3600:.1f}",  # Th√™m c·ªôt th·ªùi gian c√≤n l·∫°i
            }
        )

    # T·∫°o DataFrame v√† hi·ªÉn th·ªã
    df_performance = pd.DataFrame(user_performance)

    if not df_performance.empty:
        st.dataframe(
            df_performance[
                [
                    "Assignee",
                    "Tasks",
                    "Done",
                    "Completion Rate",
                    "Original Estimate (h)",
                    "Time Spent (h)",
                    "Time Remaining (h)",  # Th√™m c·ªôt th·ªùi gian c√≤n l·∫°i v√†o hi·ªÉn th·ªã
                    "Time Efficiency",
                ]
            ]
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì hi·ªáu su·∫•t
        st.subheader("üìà Bi·ªÉu ƒë·ªì t·ª∑ l·ªá ho√†n th√†nh c√¥ng vi·ªác")

        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
        fig, ax = plt.subplots(figsize=(10, 6))

        # S·∫Øp x·∫øp theo t·ª∑ l·ªá ho√†n th√†nh
        df_sorted = df_performance.sort_values(
            "Completion Rate Numeric", ascending=False
        )

        # T·∫°o bi·ªÉu ƒë·ªì
        bars = ax.bar(
            df_sorted["Assignee"], df_sorted["Completion Rate Numeric"], color="skyblue"
        )

        # Th√™m nh√£n gi√° tr·ªã
        for bar in bars:
            height = bar.get_height()
            ax.text(
                bar.get_x() + bar.get_width() / 2.0,
                height + 1,
                f"{height:.0f}%",
                ha="center",
                va="bottom",
            )

        ax.set_ylim(0, 110)  # ƒê·∫∑t gi·ªõi h·∫°n y ƒë·ªÉ c√≥ kh√¥ng gian cho nh√£n
        ax.set_ylabel("T·ª∑ l·ªá ho√†n th√†nh (%)")
        ax.set_title("T·ª∑ l·ªá ho√†n th√†nh c√¥ng vi·ªác theo ng∆∞·ªùi")
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()

        st.pyplot(fig)

        return df_performance
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu hi·ªáu su·∫•t ƒë·ªÉ hi·ªÉn th·ªã.")
        return pd.DataFrame()


def display_time_efficiency_chart(df_performance):
    """
    Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì hi·ªáu su·∫•t v·ªÅ th·ªùi gian

    Args:
        df_performance (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin hi·ªáu su·∫•t c·ªßa team
    """
    if df_performance.empty:
        return

    st.subheader("‚è±Ô∏è Bi·ªÉu ƒë·ªì hi·ªáu su·∫•t v·ªÅ th·ªùi gian")

    # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))

    # S·∫Øp x·∫øp theo th·ªùi gian ∆∞·ªõc t√≠nh
    df_sorted = df_performance.sort_values("Original Estimate", ascending=False)

    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt gh√©p
    width = 0.35
    x = np.arange(len(df_sorted))

    # Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ gi√¢y sang gi·ªù
    estimate_hours = df_sorted["Original Estimate"] / 3600
    spent_hours = df_sorted["Time Spent"] / 3600

    bar1 = ax.bar(
        x - width / 2, estimate_hours, width, label="∆Ø·ªõc t√≠nh (gi·ªù)", color="#2196F3"
    )
    bar2 = ax.bar(
        x + width / 2, spent_hours, width, label="ƒê√£ d√πng (gi·ªù)", color="#FF9800"
    )

    # Th√™m nh√£n gi√° tr·ªã
    for bar in bar1:
        height = bar.get_height()
        if height > 0:
            ax.text(
                bar.get_x() + bar.get_width() / 2.0,
                height + 0.5,
                f"{height:.1f}h",
                ha="center",
                va="bottom",
                fontsize=9,
            )

    for bar in bar2:
        height = bar.get_height()
        if height > 0:
            ax.text(
                bar.get_x() + bar.get_width() / 2.0,
                height + 0.5,
                f"{height:.1f}h",
                ha="center",
                va="bottom",
                fontsize=9,
            )

    # Th√™m t·ª∑ l·ªá hi·ªáu su·∫•t th·ªùi gian
    for i, (idx, row) in enumerate(df_sorted.iterrows()):
        efficiency = row["Time Efficiency Numeric"]
        color = "green" if efficiency <= 100 else "red"
        ax.text(
            i,
            max(estimate_hours.iloc[i], spent_hours.iloc[i]) + 2,
            f"{efficiency:.0f}%",
            ha="center",
            va="bottom",
            color=color,
            fontweight="bold",
        )

    ax.set_ylabel("Th·ªùi gian (gi·ªù)")
    ax.set_title("So s√°nh th·ªùi gian ∆∞·ªõc t√≠nh v√† th·ªùi gian ƒë√£ s·ª≠ d·ª•ng")
    ax.set_xticks(x)
    ax.set_xticklabels(df_sorted["Assignee"], rotation=45, ha="right")
    ax.legend()

    # ƒê·∫∑t gi·ªõi h·∫°n y ƒë·ªÉ c√≥ kh√¥ng gian cho nh√£n
    y_max = max(max(estimate_hours), max(spent_hours)) * 1.3
    ax.set_ylim(0, y_max)

    plt.tight_layout()
    st.pyplot(fig)

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì hi·ªáu su·∫•t th·ªùi gian
    fig2, ax2 = plt.subplots(figsize=(10, 6))

    # S·∫Øp x·∫øp theo hi·ªáu su·∫•t th·ªùi gian
    df_time_sorted = df_performance.sort_values("Time Efficiency Numeric")

    # T·∫°o bi·ªÉu ƒë·ªì
    bars = ax2.bar(
        df_time_sorted["Assignee"],
        df_time_sorted["Time Efficiency Numeric"],
        color=[
            "green" if x <= 100 else "red"
            for x in df_time_sorted["Time Efficiency Numeric"]
        ],
    )

    # Th√™m nh√£n gi√° tr·ªã
    for bar in bars:
        height = bar.get_height()
        ax2.text(
            bar.get_x() + bar.get_width() / 2.0,
            height + 1,
            f"{height:.0f}%",
            ha="center",
            va="bottom",
        )

    # Th√™m ƒë∆∞·ªùng tham chi·∫øu 100%
    ax2.axhline(y=100, color="black", linestyle="--", alpha=0.7)

    ax2.set_ylabel("Hi·ªáu su·∫•t th·ªùi gian (%)")
    ax2.set_title(
        "Hi·ªáu su·∫•t th·ªùi gian theo ng∆∞·ªùi (Th·ªùi gian ƒë√£ d√πng / Th·ªùi gian ∆∞·ªõc t√≠nh)"
    )
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()

    st.pyplot(fig2)


def display_issue_type_chart(df_issues):
    """
    Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì th·ªëng k√™ theo lo·∫°i issue, ph√¢n chia ri√™ng cho task v√† subtask

    Args:
        df_issues (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin c√°c issue
    """
    st.subheader("üìä Th·ªëng k√™ theo lo·∫°i issue")

    # T√°ch DataFrame th√†nh task v√† subtask
    tasks = df_issues[df_issues["is_subtask"] == False]
    subtasks = df_issues[df_issues["is_subtask"] == True]

    # T·∫°o layout 2 c·ªôt
    col1, col2 = st.columns((2, 3))

    with col1:
        st.write("#### Ph√¢n b·ªë lo·∫°i Task")
        if not tasks.empty:
            # hi·ªán pie chart ph√¢n b·ªë
            task_type_counts = tasks["issuetype"].value_counts()
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(
                task_type_counts.values,
                labels=task_type_counts.index,
                autopct="%1.1f%%",
            )
            st.pyplot(fig)
        else:
            st.info("Kh√¥ng c√≥ task n√†o trong sprint n√†y.")

    with col2:
        st.write("#### Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng tr·∫°ng th√°i c·ªßa c√°c task v√† sub task")
        # ƒê·∫øm s·ªë l∆∞·ª£ng tr·∫°ng th√°i c·ªßa c√°c task v√† sub task
        task_status_counts = tasks["status"].value_counts()
        subtask_status_counts = subtasks["status"].value_counts()

        # S·∫Øp x·∫øp c√°c tr·∫°ng th√°i theo th·ª© t·ª± mong mu·ªën
        ordered_statuses = [
            "To Do",
            "Re Open",
            "In Progress",
            "Dev Done",
            "Test Done",
            "Deployed",
            "Done",
        ]
        task_status_counts = task_status_counts.reindex(ordered_statuses)
        subtask_status_counts = subtask_status_counts.reindex(ordered_statuses)

        # T·∫°o bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(
            task_status_counts.index,
            task_status_counts.values,
            color="skyblue",
            label="Task",
        )
        ax.bar(
            subtask_status_counts.index,
            subtask_status_counts.values,
            color="red",
            label="Sub Task",
        )
        ax.set_xlabel("Tr·∫°ng th√°i")
        ax.set_ylabel("S·ªë l∆∞·ª£ng")
        ax.set_title("S·ªë l∆∞·ª£ng tr·∫°ng th√°i c·ªßa c√°c task v√† sub task")
        ax.legend()
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        st.pyplot(fig)


def display_sprint_overview(sprint, issues):
    """Display sprint overview information

    Args:
        sprint (dict): Sprint data
        issues (list): List of issues in the sprint
    """
    st.header("üèÉ‚Äç‚ôÇÔ∏è Sprint Overview")

    try:
        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa sprint
        st.write(f"Sprint: {sprint.get('name', 'Unknown')}")

        # Ki·ªÉm tra xem issues c√≥ d·ªØ li·ªáu kh√¥ng
        if not issues:
            st.warning("Kh√¥ng c√≥ issue n√†o trong sprint n√†y.")
            return

        # ·∫®n ph·∫ßn hi·ªÉn th·ªã c·∫•u tr√∫c d·ªØ li·ªáu issue ƒë·∫ßu ti√™n
        # st.subheader("C·∫•u tr√∫c d·ªØ li·ªáu issue ƒë·∫ßu ti√™n")
        # st.json(issues[0])

        # Ki·ªÉm tra xem issue c√≥ thu·ªôc t√≠nh 'fields' kh√¥ng
        if "fields" not in issues[0]:
            st.error(
                "Issue kh√¥ng c√≥ thu·ªôc t√≠nh 'fields'. C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng."
            )
            return

        # T·∫°o DataFrame s·ª≠ d·ª•ng h√†m ri√™ng
        df_issues = create_issues_dataframe(issues)

        # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ph√¢n t√≠ch cho sprint
        display_sprint_metrics(df_issues, sprint)

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì th·ªëng k√™ theo lo·∫°i issue
        display_issue_type_chart(df_issues)

        # Hi·ªÉn th·ªã hi·ªáu su·∫•t c·ªßa team v√† t·ª´ng ng∆∞·ªùi
        df_performance = display_team_performance(df_issues)

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì hi·ªáu su·∫•t t·ªïng h·ª£p cho c√°c developer
        # display_developer_summary_chart(df_issues, df_performance)

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì hi·ªáu su·∫•t v·ªÅ th·ªùi gian
        display_time_efficiency_chart(df_performance)

        # Hi·ªÉn th·ªã burndown chart d·ª±a tr√™n th·ªùi gian ∆∞·ªõc t√≠nh
        display_burndown_chart(df_issues, sprint)

        # Hi·ªÉn th·ªã burndown chart d·ª±a tr√™n s·ªë l∆∞·ª£ng task v√† subtask
        display_task_burndown_chart(df_issues, sprint)

        # Hi·ªÉn th·ªã DataFrame trong expander ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian
        with st.expander("Xem danh s√°ch t·∫•t c·∫£ c√°c issues"):
            # Th√™m b·ªô l·ªçc theo key
            filter_keys = st.text_input(
                "L·ªçc theo key (nh·∫≠p c√°c key, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y ho·∫∑c kho·∫£ng tr·∫Øng):",
                help="V√≠ d·ª•: CLD-123, CLD-456",
            )

            # X·ª≠ l√Ω c√°c key ƒë∆∞·ª£c nh·∫≠p
            if filter_keys:
                # T√°ch c√°c key v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
                keys = [k.strip() for k in filter_keys.replace(",", " ").split()]

                # L·ªçc DataFrame theo c√°c key
                if keys:
                    filtered_df = df_issues[df_issues["key"].isin(keys)]
                    st.write(
                        f"ƒêang hi·ªÉn th·ªã {len(filtered_df)} issues kh·ªõp v·ªõi c√°c key ƒë√£ nh·∫≠p."
                    )
                    st.dataframe(filtered_df)
                else:
                    st.dataframe(df_issues)
            else:
                # Hi·ªÉn th·ªã t·∫•t c·∫£ issues n·∫øu kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c nh·∫≠p
                st.dataframe(df_issues)

            # Th√™m t√πy ch·ªçn t·∫£i xu·ªëng d·ªØ li·ªáu
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                df_issues.to_excel(writer, sheet_name="Issues", index=False)

            buffer.seek(0)

            st.download_button(
                label="T·∫£i xu·ªëng d·ªØ li·ªáu Excel",
                data=buffer,
                file_name=f"sprint_issues_{sprint.get('name', 'Unknown').replace(' ', '_')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        # Sprint goal
        if sprint.get("goal"):
            st.subheader("üéØ Sprint Goal")
            st.info(sprint.get("goal", "Kh√¥ng c√≥ m·ª•c ti√™u ƒë∆∞·ª£c x√°c ƒë·ªãnh"))

    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin sprint: {str(e)}")
        st.info("Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi Jira c·ªßa b·∫°n ho·∫∑c c·∫•u h√¨nh sprint.")

        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n n·∫øu c√≥
        if "name" in sprint:
            st.metric("Sprint", sprint["name"])
        if "goal" in sprint:
            st.subheader("Sprint Goal")
            st.info(sprint["goal"])


def display_developer_summary_chart(df_issues, df_performance):
    """
    Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì hi·ªáu su·∫•t t·ªïng h·ª£p cho c√°c developer

    Args:
        df_issues (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin c√°c issue
        df_performance (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin hi·ªáu su·∫•t c·ªßa team
    """
    if df_performance.empty:
        return

    st.subheader("üåü Hi·ªáu su·∫•t t·ªïng h·ª£p c·ªßa developer")

    # ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i ho√†n th√†nh
    done_statuses = ["Dev Done", "Test Done", "Deployed", "Done"]

    # T·∫°o DataFrame t·ªïng h·ª£p
    summary_data = []

    for assignee in df_performance["Assignee"].unique():
        # L·∫•y th√¥ng tin t·ª´ df_performance
        user_perf = df_performance[df_performance["Assignee"] == assignee].iloc[0]

        # T√≠nh s·ªë l∆∞·ª£ng v√† hi·ªáu su·∫•t th·ªùi gian cho sub-task
        user_subtasks = df_issues[
            (df_issues["assignee"] == assignee) & (df_issues["is_subtask"] == True)
        ]

        user_subtasks_done = user_subtasks[user_subtasks["status"].isin(done_statuses)]

        total_subtasks = len(user_subtasks)
        subtasks_done = len(user_subtasks_done)
        subtask_completion_rate = (
            (subtasks_done / total_subtasks * 100) if total_subtasks > 0 else 0
        )

        # T√≠nh hi·ªáu su·∫•t th·ªùi gian cho sub-task
        subtask_estimate = user_subtasks["timeoriginalestimate"].sum()
        subtask_spent = user_subtasks["timespent"].sum()
        subtask_time_efficiency = (
            (subtask_spent / subtask_estimate * 100) if subtask_estimate > 0 else 0
        )

        # T√≠nh hi·ªáu su·∫•t th·ªùi gian cho task (kh√¥ng ph·∫£i sub-task)
        user_tasks = df_issues[
            (df_issues["assignee"] == assignee)
            & (df_issues["is_subtask"] == False)
            & (df_issues["issuetype"] != "Epic")
        ]

        task_estimate = user_tasks["timeoriginalestimate"].sum()
        task_spent = user_tasks["timespent"].sum()
        task_time_efficiency = (
            (task_spent / task_estimate * 100) if task_estimate > 0 else 0
        )

        # Chu·∫©n h√≥a c√°c ch·ªâ s·ªë (ƒë·ªÉ bi·ªÉu ƒë·ªì radar d·ªÖ ƒë·ªçc)
        # Hi·ªáu su·∫•t th·ªùi gian: <= 100% l√† t·ªët, > 100% l√† k√©m
        time_efficiency_score = (
            max(0, 100 - (user_perf["Time Efficiency Numeric"] - 100))
            if user_perf["Time Efficiency Numeric"] > 100
            else 100
        )

        task_time_efficiency_score = (
            max(0, 100 - (task_time_efficiency - 100))
            if task_time_efficiency > 100
            else 100
        )

        subtask_time_efficiency_score = (
            max(0, 100 - (subtask_time_efficiency - 100))
            if subtask_time_efficiency > 100
            else 100
        )

        summary_data.append(
            {
                "Developer": assignee,
                "Tasks": int(user_perf["Tasks"]),
                "Tasks Done": int(user_perf["Done"]),
                "Task Completion": user_perf["Completion Rate Numeric"],
                "Subtasks": total_subtasks,
                "Subtasks Done": subtasks_done,
                "Subtask Completion": subtask_completion_rate,
                "Time Efficiency": user_perf["Time Efficiency Numeric"],
                "Time Efficiency Score": time_efficiency_score,
                "Task Time Efficiency": task_time_efficiency,
                "Task Time Efficiency Score": task_time_efficiency_score,
                "Subtask Time Efficiency": subtask_time_efficiency,
                "Subtask Time Efficiency Score": subtask_time_efficiency_score,
            }
        )

    # T·∫°o DataFrame
    df_summary = pd.DataFrame(summary_data)

    # Hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p
    st.dataframe(
        df_summary[
            [
                "Developer",
                "Tasks",
                "Tasks Done",
                "Task Completion",
                "Task Time Efficiency",
                "Subtasks",
                "Subtasks Done",
                "Subtask Completion",
                "Subtask Time Efficiency",
                "Time Efficiency",
            ]
        ]
        .rename(
            columns={
                "Task Completion": "Task Completion (%)",
                "Subtask Completion": "Subtask Completion (%)",
                "Time Efficiency": "Overall Time Efficiency (%)",
                "Task Time Efficiency": "Task Time Efficiency (%)",
                "Subtask Time Efficiency": "Subtask Time Efficiency (%)",
            }
        )
        .style.format(
            {
                "Task Completion (%)": "{:.0f}%",
                "Subtask Completion (%)": "{:.0f}%",
                "Overall Time Efficiency (%)": "{:.0f}%",
                "Task Time Efficiency (%)": "{:.0f}%",
                "Subtask Time Efficiency (%)": "{:.0f}%",
            }
        )
    )

    # T·∫°o bi·ªÉu ƒë·ªì t·ªïng h·ª£p d·∫°ng radar (spider chart)
    if len(df_summary) > 0:
        # T·∫°o bi·ªÉu ƒë·ªì radar
        fig = plt.figure(figsize=(10, 8))

        # S·ªë l∆∞·ª£ng ch·ªâ s·ªë
        categories = [
            "Task Completion",
            "Subtask Completion",
            "Task Time Efficiency Score",
            "Subtask Time Efficiency Score",
            "Overall Time Efficiency Score",
        ]
        N = len(categories)

        # G√≥c cho m·ªói tr·ª•c
        angles = [n / float(N) * 2 * np.pi for n in range(N)]
        angles += angles[:1]  # ƒê√≥ng v√≤ng tr√≤n

        # T·∫°o subplot v·ªõi t·ªça ƒë·ªô c·ª±c
        ax = plt.subplot(111, polar=True)

        # ƒê·∫∑t g√≥c b·∫Øt ƒë·∫ßu ·ªü tr√™n c√πng
        ax.set_theta_offset(np.pi / 2)
        ax.set_theta_direction(-1)

        # V·∫Ω c√°c tr·ª•c
        plt.xticks(angles[:-1], categories)

        # ƒê·∫∑t gi·ªõi h·∫°n y t·ª´ 0 ƒë·∫øn 100
        ax.set_ylim(0, 100)

        # Th√™m nh√£n y
        ax.set_rlabel_position(0)
        plt.yticks(
            [25, 50, 75, 100], ["25%", "50%", "75%", "100%"], color="grey", size=8
        )

        # M√†u s·∫Øc cho m·ªói developer
        colors = plt.cm.tab10(np.linspace(0, 1, len(df_summary)))

        # V·∫Ω d·ªØ li·ªáu cho m·ªói developer
        for i, (idx, row) in enumerate(df_summary.iterrows()):
            values = [
                row["Task Completion"],
                row["Subtask Completion"],
                row["Task Time Efficiency Score"],
                row["Subtask Time Efficiency Score"],
                row["Time Efficiency Score"],
            ]
            values += values[:1]  # ƒê√≥ng v√≤ng tr√≤n

            # V·∫Ω ƒë∆∞·ªùng
            ax.plot(
                angles,
                values,
                linewidth=2,
                linestyle="solid",
                color=colors[i],
                label=row["Developer"],
            )
            # T√¥ m√†u v√πng
            ax.fill(angles, values, color=colors[i], alpha=0.1)

        # Th√™m ch√∫ th√≠ch
        plt.legend(loc="upper right", bbox_to_anchor=(0.1, 0.1))

        plt.title("Hi·ªáu su·∫•t t·ªïng h·ª£p c·ªßa developer", size=15, y=1.1)
        st.pyplot(fig)

        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt gh√©p cho s·ªë l∆∞·ª£ng task v√† subtask
        fig2, ax2 = plt.subplots(figsize=(12, 6))

        # S·∫Øp x·∫øp theo t·ªïng s·ªë task
        df_sorted = df_summary.sort_values("Tasks", ascending=False)

        # V·ªã tr√≠ c√°c c·ªôt
        x = np.arange(len(df_sorted))
        width = 0.2

        # V·∫Ω c√°c c·ªôt
        ax2.bar(
            x - width * 1.5, df_sorted["Tasks"], width, label="Tasks", color="#2196F3"
        )
        ax2.bar(
            x - width / 2,
            df_sorted["Tasks Done"],
            width,
            label="Tasks Done",
            color="#4CAF50",
        )
        ax2.bar(
            x + width / 2,
            df_sorted["Subtasks"],
            width,
            label="Subtasks",
            color="#FF9800",
        )
        ax2.bar(
            x + width * 1.5,
            df_sorted["Subtasks Done"],
            width,
            label="Subtasks Done",
            color="#9C27B0",
        )

        # Th√™m nh√£n v√† ti√™u ƒë·ªÅ
        ax2.set_xlabel("Developer")
        ax2.set_ylabel("S·ªë l∆∞·ª£ng")
        ax2.set_title("S·ªë l∆∞·ª£ng task v√† subtask theo developer")
        ax2.set_xticks(x)
        ax2.set_xticklabels(df_sorted["Developer"], rotation=45, ha="right")
        ax2.legend()

        plt.tight_layout()
        st.pyplot(fig2)

        # T·∫°o bi·ªÉu ƒë·ªì hi·ªáu su·∫•t th·ªùi gian cho task v√† subtask
        fig3, ax3 = plt.subplots(figsize=(12, 6))

        # S·∫Øp x·∫øp theo hi·ªáu su·∫•t th·ªùi gian t·ªïng th·ªÉ
        df_time_sorted = df_summary.sort_values("Time Efficiency")

        # V·ªã tr√≠ c√°c c·ªôt
        x = np.arange(len(df_time_sorted))
        width = 0.25

        # V·∫Ω c√°c c·ªôt
        ax3.bar(
            x - width,
            df_time_sorted["Task Time Efficiency"],
            width,
            label="Task Time Efficiency",
            color=(
                "#4CAF50"
                if all(df_time_sorted["Task Time Efficiency"] <= 100)
                else [
                    "green" if x <= 100 else "red"
                    for x in df_time_sorted["Task Time Efficiency"]
                ]
            ),
        )
        ax3.bar(
            x,
            df_time_sorted["Subtask Time Efficiency"],
            width,
            label="Subtask Time Efficiency",
            color=(
                "#2196F3"
                if all(df_time_sorted["Subtask Time Efficiency"] <= 100)
                else [
                    "blue" if x <= 100 else "orange"
                    for x in df_time_sorted["Subtask Time Efficiency"]
                ]
            ),
        )
        ax3.bar(
            x + width,
            df_time_sorted["Time Efficiency"],
            width,
            label="Overall Time Efficiency",
            color=(
                "#9C27B0"
                if all(df_time_sorted["Time Efficiency"] <= 100)
                else [
                    "purple" if x <= 100 else "red"
                    for x in df_time_sorted["Time Efficiency"]
                ]
            ),
        )

        # Th√™m ƒë∆∞·ªùng tham chi·∫øu 100%
        ax3.axhline(y=100, color="black", linestyle="--", alpha=0.7)

        # Th√™m nh√£n v√† ti√™u ƒë·ªÅ
        ax3.set_xlabel("Developer")
        ax3.set_ylabel("Hi·ªáu su·∫•t th·ªùi gian (%)")
        ax3.set_title("So s√°nh hi·ªáu su·∫•t th·ªùi gian gi·ªØa task v√† subtask")
        ax3.set_xticks(x)
        ax3.set_xticklabels(df_time_sorted["Developer"], rotation=45, ha="right")
        ax3.legend()

        plt.tight_layout()
        st.pyplot(fig3)


def display_burndown_chart(df_issues, sprint):
    """
    Hi·ªÉn th·ªã burndown chart cho sprint d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ API
    v√† t√≠nh to√°n d·ª±a tr√™n timeoriginalestimate

    Args:
        df_issues (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin c√°c issue
        sprint (dict): Th√¥ng tin v·ªÅ sprint
    """
    st.subheader("üìâ Sprint Burndown Chart")

    # Ki·ªÉm tra xem sprint c√≥ th√¥ng tin th·ªùi gian kh√¥ng
    if not (sprint.get("startDate") and sprint.get("endDate")):
        st.warning("Kh√¥ng c√≥ ƒë·ªß th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o burndown chart.")
        return

    try:
        # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh ƒë·ªëi t∆∞·ª£ng datetime
        start_date = datetime.strptime(sprint.get("startDate"), "%Y-%m-%dT%H:%M:%S.%fZ")
        end_date = datetime.strptime(sprint.get("endDate"), "%Y-%m-%dT%H:%M:%S.%fZ")

        # T√≠nh t·ªïng s·ªë ng√†y c·ªßa sprint
        total_days = (end_date - start_date).days + 1

        # T·∫°o danh s√°ch c√°c ng√†y trong sprint
        sprint_days = [start_date + timedelta(days=i) for i in range(total_days)]

        # T√≠nh t·ªïng s·ªë gi·ªù ∆∞·ªõc t√≠nh cho t·∫•t c·∫£ c√°c issue
        total_estimate_hours = df_issues["timeoriginalestimate"].sum() / 3600

        # T·∫°o d·ªØ li·ªáu cho ƒë∆∞·ªùng l√Ω t∆∞·ªüng (ideal burndown)
        ideal_burndown = [
            total_estimate_hours * (1 - i / (total_days - 1)) for i in range(total_days)
        ]

        # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
        burndown_data = pd.DataFrame(
            {
                "Ng√†y": sprint_days,
                "L√Ω t∆∞·ªüng": ideal_burndown,
                "Th·ª±c t·∫ø": [None] * total_days,  # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
            }
        )

        # Ng√†y hi·ªán t·∫°i
        today = datetime.now()

        # T√≠nh s·ªë gi·ªù c√≤n l·∫°i th·ª±c t·∫ø cho m·ªói ng√†y ƒë√£ qua
        # Trong th·ª±c t·∫ø, ch√∫ng ta ch·ªâ c√≥ d·ªØ li·ªáu cho ng√†y hi·ªán t·∫°i
        # V√¨ v·∫≠y, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng gi√° tr·ªã hi·ªán t·∫°i cho t·∫•t c·∫£ c√°c ng√†y ƒë√£ qua

        # T√≠nh t·ªïng s·ªë gi·ªù c√≤n l·∫°i d·ª±a tr√™n remainingestimate
        remaining_estimate_hours = df_issues["remainingestimate"].sum() / 3600

        # C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ª±c t·∫ø
        for i, day in enumerate(sprint_days):
            if day <= today:
                if i == len(sprint_days) - 1 or day.date() == today.date():
                    # Ng√†y hi·ªán t·∫°i ho·∫∑c ng√†y cu·ªëi c√πng: s·ª≠ d·ª•ng gi√° tr·ªã th·ª±c t·∫ø
                    burndown_data.at[i, "Th·ª±c t·∫ø"] = remaining_estimate_hours
                else:
                    # Ng√†y trong qu√° kh·ª©: n·ªôi suy tuy·∫øn t√≠nh gi·ªØa ng√†y ƒë·∫ßu ti√™n v√† ng√†y hi·ªán t·∫°i
                    days_passed = (day - start_date).days
                    days_total = (today - start_date).days
                    if days_total > 0:
                        ratio = days_passed / days_total
                        burndown_data.at[i, "Th·ª±c t·∫ø"] = (
                            total_estimate_hours
                            - ratio * (total_estimate_hours - remaining_estimate_hours)
                        )
                    else:
                        burndown_data.at[i, "Th·ª±c t·∫ø"] = total_estimate_hours

        # T·∫°o bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(12, 6))

        # V·∫Ω ƒë∆∞·ªùng l√Ω t∆∞·ªüng
        ax.plot(
            burndown_data["Ng√†y"],
            burndown_data["L√Ω t∆∞·ªüng"],
            marker="o",
            linestyle="-",
            color="#2196F3",
            label="L√Ω t∆∞·ªüng",
        )

        # V·∫Ω ƒë∆∞·ªùng th·ª±c t·∫ø
        ax.plot(
            burndown_data["Ng√†y"][: today.day - start_date.day + 1],
            burndown_data["Th·ª±c t·∫ø"][: today.day - start_date.day + 1],
            marker="o",
            linestyle="-",
            color="#F44336",
            label="Th·ª±c t·∫ø",
        )

        # Th√™m ƒë∆∞·ªùng tham chi·∫øu 0
        ax.axhline(y=0, color="black", linestyle="--", alpha=0.3)

        # Th√™m ƒë∆∞·ªùng d·ªçc cho ng√†y hi·ªán t·∫°i
        if start_date <= today <= end_date:
            ax.axvline(
                x=today, color="green", linestyle="--", alpha=0.5, label="H√¥m nay"
            )

        # ƒê·ªãnh d·∫°ng tr·ª•c x ƒë·ªÉ hi·ªÉn th·ªã ng√†y
        ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter("%d/%m"))
        plt.xticks(rotation=45)

        # Th√™m nh√£n v√† ti√™u ƒë·ªÅ
        ax.set_xlabel("Ng√†y")
        ax.set_ylabel("Gi·ªù c√≤n l·∫°i")
        ax.set_title("Sprint Burndown Chart")
        ax.legend()

        # ƒê·∫£m b·∫£o y kh√¥ng √¢m
        ax.set_ylim(bottom=0)

        plt.tight_layout()
        st.pyplot(fig)

        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("T·ªïng th·ªùi gian ∆∞·ªõc t√≠nh", f"{total_estimate_hours:.1f} gi·ªù")
        with col2:
            st.metric("Th·ªùi gian c√≤n l·∫°i", f"{remaining_estimate_hours:.1f} gi·ªù")
        with col3:
            progress_percent = (
                (
                    (total_estimate_hours - remaining_estimate_hours)
                    / total_estimate_hours
                    * 100
                )
                if total_estimate_hours > 0
                else 0
            )
            st.metric("Ti·∫øn ƒë·ªô ho√†n th√†nh", f"{progress_percent:.1f}%")

        # Th√™m gi·∫£i th√≠ch
        st.info(
            """
        **Gi·∫£i th√≠ch Burndown Chart:**
        - **ƒê∆∞·ªùng m√†u xanh (L√Ω t∆∞·ªüng)**: Th·ªÉ hi·ªán t·ªëc ƒë·ªô l√Ω t∆∞·ªüng m√† team n√™n ho√†n th√†nh c√¥ng vi·ªác.
        - **ƒê∆∞·ªùng m√†u ƒë·ªè (Th·ª±c t·∫ø)**: Th·ªÉ hi·ªán th·ªùi gian c√≤n l·∫°i th·ª±c t·∫ø d·ª±a tr√™n d·ªØ li·ªáu t·ª´ Jira.
        - N·∫øu ƒë∆∞·ªùng th·ª±c t·∫ø n·∫±m **tr√™n** ƒë∆∞·ªùng l√Ω t∆∞·ªüng: Team ƒëang l√†m vi·ªác **ch·∫≠m h∆°n** k·∫ø ho·∫°ch.
        - N·∫øu ƒë∆∞·ªùng th·ª±c t·∫ø n·∫±m **d∆∞·ªõi** ƒë∆∞·ªùng l√Ω t∆∞·ªüng: Team ƒëang l√†m vi·ªác **nhanh h∆°n** k·∫ø ho·∫°ch.
        
        *L∆∞u √Ω: D·ªØ li·ªáu th·ª±c t·∫ø ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n `timeoriginalestimate` v√† `remainingestimate` t·ª´ Jira API.*
        """
        )

    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫°o burndown chart: {str(e)}")
        import traceback

        st.error(traceback.format_exc())


def display_task_burndown_chart(df_issues, sprint):
    """
    Hi·ªÉn th·ªã burndown chart d·ª±a tr√™n s·ªë l∆∞·ª£ng task v√† subtask

    Args:
        df_issues (pd.DataFrame): DataFrame ch·ª©a th√¥ng tin c√°c issue
        sprint (dict): Th√¥ng tin v·ªÅ sprint
    """
    st.subheader("üìâ Sprint Burndown Chart (S·ªë l∆∞·ª£ng Task)")

    # Ki·ªÉm tra xem sprint c√≥ th√¥ng tin th·ªùi gian kh√¥ng
    if not (sprint.get("startDate") and sprint.get("endDate")):
        st.warning("Kh√¥ng c√≥ ƒë·ªß th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o burndown chart.")
        return

    try:
        # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh ƒë·ªëi t∆∞·ª£ng datetime
        start_date = datetime.strptime(sprint.get("startDate"), "%Y-%m-%dT%H:%M:%S.%fZ")
        end_date = datetime.strptime(sprint.get("endDate"), "%Y-%m-%dT%H:%M:%S.%fZ")

        # T√≠nh t·ªïng s·ªë ng√†y c·ªßa sprint
        total_days = (end_date - start_date).days + 1

        # T·∫°o danh s√°ch c√°c ng√†y trong sprint
        sprint_days = [start_date + timedelta(days=i) for i in range(total_days)]

        # ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i ho√†n th√†nh
        done_statuses = ["Dev Done", "Test Done", "Deployed", "Done"]

        # T√≠nh t·ªïng s·ªë task v√† subtask
        tasks = df_issues[
            (df_issues["issuetype"] != "Epic") & (df_issues["is_subtask"] == False)
        ]
        subtasks = df_issues[df_issues["is_subtask"] == True]

        total_tasks = len(tasks)
        total_subtasks = len(subtasks)
        total_issues = total_tasks + total_subtasks

        # T√≠nh s·ªë task v√† subtask ƒë√£ ho√†n th√†nh
        tasks_done = len(tasks[tasks["status"].isin(done_statuses)])
        subtasks_done = len(subtasks[subtasks["status"].isin(done_statuses)])
        total_done = tasks_done + subtasks_done

        # T√≠nh s·ªë task v√† subtask c√≤n l·∫°i
        remaining_issues = total_issues - total_done

        # T·∫°o d·ªØ li·ªáu cho ƒë∆∞·ªùng l√Ω t∆∞·ªüng (ideal burndown)
        ideal_burndown = [
            total_issues * (1 - i / (total_days - 1)) for i in range(total_days)
        ]

        # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
        burndown_data = pd.DataFrame(
            {
                "Ng√†y": sprint_days,
                "L√Ω t∆∞·ªüng": ideal_burndown,
                "Th·ª±c t·∫ø": [None] * total_days,  # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
            }
        )

        # Ng√†y hi·ªán t·∫°i
        today = datetime.now()

        # C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ª±c t·∫ø
        for i, day in enumerate(sprint_days):
            if day <= today:
                if i == len(sprint_days) - 1 or day.date() == today.date():
                    # Ng√†y hi·ªán t·∫°i ho·∫∑c ng√†y cu·ªëi c√πng: s·ª≠ d·ª•ng gi√° tr·ªã th·ª±c t·∫ø
                    burndown_data.at[i, "Th·ª±c t·∫ø"] = remaining_issues
                else:
                    # Ng√†y trong qu√° kh·ª©: n·ªôi suy tuy·∫øn t√≠nh gi·ªØa ng√†y ƒë·∫ßu ti√™n v√† ng√†y hi·ªán t·∫°i
                    days_passed = (day - start_date).days
                    days_total = (today - start_date).days
                    if days_total > 0:
                        ratio = days_passed / days_total
                        burndown_data.at[i, "Th·ª±c t·∫ø"] = (
                            total_issues - ratio * total_done
                        )
                    else:
                        burndown_data.at[i, "Th·ª±c t·∫ø"] = total_issues

        # T·∫°o bi·ªÉu ƒë·ªì
        fig, ax = plt.subplots(figsize=(12, 6))

        # V·∫Ω ƒë∆∞·ªùng l√Ω t∆∞·ªüng
        ax.plot(
            burndown_data["Ng√†y"],
            burndown_data["L√Ω t∆∞·ªüng"],
            marker="o",
            linestyle="-",
            color="#2196F3",
            label="L√Ω t∆∞·ªüng",
        )

        # V·∫Ω ƒë∆∞·ªùng th·ª±c t·∫ø
        ax.plot(
            burndown_data["Ng√†y"][: today.day - start_date.day + 1],
            burndown_data["Th·ª±c t·∫ø"][: today.day - start_date.day + 1],
            marker="o",
            linestyle="-",
            color="#F44336",
            label="Th·ª±c t·∫ø",
        )

        # Th√™m ƒë∆∞·ªùng tham chi·∫øu 0
        ax.axhline(y=0, color="black", linestyle="--", alpha=0.3)

        # Th√™m ƒë∆∞·ªùng d·ªçc cho ng√†y hi·ªán t·∫°i
        if start_date <= today <= end_date:
            ax.axvline(
                x=today, color="green", linestyle="--", alpha=0.5, label="H√¥m nay"
            )

        # ƒê·ªãnh d·∫°ng tr·ª•c x ƒë·ªÉ hi·ªÉn th·ªã ng√†y
        ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter("%d/%m"))
        plt.xticks(rotation=45)

        # Th√™m nh√£n v√† ti√™u ƒë·ªÅ
        ax.set_xlabel("Ng√†y")
        ax.set_ylabel("S·ªë l∆∞·ª£ng task c√≤n l·∫°i")
        ax.set_title("Sprint Burndown Chart (S·ªë l∆∞·ª£ng Task)")
        ax.legend()

        # ƒê·∫£m b·∫£o y kh√¥ng √¢m
        ax.set_ylim(bottom=0)

        plt.tight_layout()
        st.pyplot(fig)

        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("T·ªïng s·ªë task v√† subtask", f"{total_issues}")
            st.metric(
                "Task", f"{total_tasks}", help="S·ªë l∆∞·ª£ng task (kh√¥ng bao g·ªìm Epic)"
            )
            st.metric("Subtask", f"{total_subtasks}")
        with col2:
            st.metric("ƒê√£ ho√†n th√†nh", f"{total_done}")
            st.metric("Task ƒë√£ ho√†n th√†nh", f"{tasks_done}")
            st.metric("Subtask ƒë√£ ho√†n th√†nh", f"{subtasks_done}")
        with col3:
            st.metric("C√≤n l·∫°i", f"{remaining_issues}")
            st.metric("Task c√≤n l·∫°i", f"{total_tasks - tasks_done}")
            st.metric("Subtask c√≤n l·∫°i", f"{total_subtasks - subtasks_done}")

        # T√≠nh t·ª∑ l·ªá ho√†n th√†nh
        completion_rate = (total_done / total_issues * 100) if total_issues > 0 else 0
        task_completion_rate = (
            (tasks_done / total_tasks * 100) if total_tasks > 0 else 0
        )
        subtask_completion_rate = (
            (subtasks_done / total_subtasks * 100) if total_subtasks > 0 else 0
        )

        # Hi·ªÉn th·ªã t·ª∑ l·ªá ho√†n th√†nh
        st.write("#### T·ª∑ l·ªá ho√†n th√†nh")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("T·ªïng th·ªÉ", f"{completion_rate:.1f}%")
        with col2:
            st.metric("Task", f"{task_completion_rate:.1f}%")
        with col3:
            st.metric("Subtask", f"{subtask_completion_rate:.1f}%")

        # Th√™m gi·∫£i th√≠ch
        st.info(
            """
        **Gi·∫£i th√≠ch Burndown Chart (S·ªë l∆∞·ª£ng Task):**
        - **ƒê∆∞·ªùng m√†u xanh (L√Ω t∆∞·ªüng)**: Th·ªÉ hi·ªán t·ªëc ƒë·ªô l√Ω t∆∞·ªüng m√† team n√™n ho√†n th√†nh c√°c task v√† subtask.
        - **ƒê∆∞·ªùng m√†u ƒë·ªè (Th·ª±c t·∫ø)**: Th·ªÉ hi·ªán s·ªë l∆∞·ª£ng task v√† subtask c√≤n l·∫°i th·ª±c t·∫ø.
        - N·∫øu ƒë∆∞·ªùng th·ª±c t·∫ø n·∫±m **tr√™n** ƒë∆∞·ªùng l√Ω t∆∞·ªüng: Team ƒëang ho√†n th√†nh task **ch·∫≠m h∆°n** k·∫ø ho·∫°ch.
        - N·∫øu ƒë∆∞·ªùng th·ª±c t·∫ø n·∫±m **d∆∞·ªõi** ƒë∆∞·ªùng l√Ω t∆∞·ªüng: Team ƒëang ho√†n th√†nh task **nhanh h∆°n** k·∫ø ho·∫°ch.
        """
        )

    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫°o burndown chart theo s·ªë l∆∞·ª£ng task: {str(e)}")
        import traceback

        st.error(traceback.format_exc())


# T√¨m index c·ªßa "CLD Sprint 10" n·∫øu c√≥ trong danh s√°ch
default_index = 0
sprint_options = [
    "CLD Sprint 10",
    "CLD Sprint 11",
    "CLD Sprint 12",
]  # Thay th·∫ø b·∫±ng danh s√°ch t√™n sprint c·ªßa b·∫°n
if "CLD Sprint 10" in sprint_options:
    default_index = sprint_options.index("CLD Sprint 10")
