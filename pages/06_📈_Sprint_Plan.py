import streamlit as st
import os
import sys
import json
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import re

# Add the project root to the Python path
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(__file__))))

# Import from src modules
from src.config.config import (
    APP_TITLE,
    APP_LAYOUT,
    SIDEBAR_STATE,
    DEFAULT_TIMEZONE,
    DEFAULT_PROJECT,
    TAILWIND_TABLE_CSS,
)
from src.services.jira_client import JiraClient
from src.utils.date_utils import get_current_time

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(
    page_title="K·∫ø Ho·∫°ch Sprint | Jira Analytics",
    page_icon="üìà",
    layout=APP_LAYOUT,
    initial_sidebar_state=SIDEBAR_STATE,
)


class SprintStatService:
    """D·ªãch v·ª• th·ªëng k√™ Sprint"""

    def __init__(self, project_key=DEFAULT_PROJECT):
        """Kh·ªüi t·∫°o d·ªãch v·ª• th·ªëng k√™ Sprint

        Args:
            project_key (str, optional): M√£ d·ª± √°n Jira
        """
        self.jira = JiraClient()
        self.project_key = project_key

    def get_project_sprints(self, project_key=None):
        """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c sprint c·ªßa d·ª± √°n

        Args:
            project_key (str, optional): M√£ d·ª± √°n ƒë·ªÉ ghi ƒë√® m·∫∑c ƒë·ªãnh

        Returns:
            list: Danh s√°ch c√°c sprint
        """
        if project_key is None:
            project_key = self.project_key

        # L·∫•y t·∫•t c·∫£ sprint t·ª´ t·∫•t c·∫£ c√°c board c·ªßa d·ª± √°n
        all_sprints = self.jira.get_all_sprints(project_key)

        # S·∫Øp x·∫øp theo startDate (n·∫øu c√≥) ho·∫∑c t√™n
        return sorted(
            all_sprints,
            key=lambda s: s.get("startDate", s.get("name", "")),
            reverse=True,  # S·∫Øp x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈©
        )

    def get_sprint_issues(self, sprint_id, fields=None):
        """L·∫•y danh s√°ch issue c·ªßa sprint

        Args:
            sprint_id (int): ID c·ªßa sprint
            fields (list, optional): Danh s√°ch c√°c tr∆∞·ªùng c·∫ßn l·∫•y

        Returns:
            list: Danh s√°ch c√°c issue trong sprint
        """
        if fields is None:
            fields = [
                "summary",
                "issuetype",
                "priority",
                "assignee",
                "status",
                "customfield_10016",  # Story Points
                "timeoriginalestimate",
                "timeestimate",
                "timespent",
                "created",
                "subtasks",  # Th√™m tr∆∞·ªùng subtasks ƒë·ªÉ ki·ªÉm tra c√≥ subtasks kh√¥ng
            ]

        # L·∫•y t·∫•t c·∫£ issues c·ªßa sprint
        return self.jira.get_sprint_issues(sprint_id, fields=fields)

    def calculate_sprint_stats(self, sprint_issues):
        """T√≠nh to√°n th·ªëng k√™ cho sprint

        Args:
            sprint_issues (list): Danh s√°ch c√°c issue trong sprint

        Returns:
            dict: Th·ªëng k√™ c·ªßa sprint
        """
        stats = {
            "total_issues": len(sprint_issues),
            "by_status": {},
            "by_assignee": {},
            "total_hours_original": 0,
            "total_hours_remaining": 0,
            "total_hours_spent": 0,
        }

        assignee_issues = {}
        assignee_hours_original = {}
        assignee_hours_remaining = {}
        assignee_hours_spent = {}

        for issue in sprint_issues:
            fields = issue.get("fields", {})

            # Th·ªëng k√™ theo tr·∫°ng th√°i
            status = fields.get("status", {}).get("name", "Unknown")
            if status not in stats["by_status"]:
                stats["by_status"][status] = 0
            stats["by_status"][status] += 1

            # Th√¥ng tin assignee
            assignee = fields.get("assignee", {})
            assignee_name = (
                assignee.get("displayName", "Ch∆∞a g√°n") if assignee else "Ch∆∞a g√°n"
            )

            # Kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
            if assignee_name not in assignee_issues:
                assignee_issues[assignee_name] = 0
                assignee_hours_original[assignee_name] = 0
                assignee_hours_remaining[assignee_name] = 0
                assignee_hours_spent[assignee_name] = 0

            # ƒê·∫øm s·ªë issue
            assignee_issues[assignee_name] += 1

            # T√≠nh gi·ªù d·ª± ki·∫øn t·ª´ th·ªùi gian ∆∞·ªõc t√≠nh ho·∫∑c story points
            time_original = fields.get("timeoriginalestimate", 0)
            story_points = fields.get("customfield_10016", 0)
            hours_original = 0

            if time_original:
                # S·ª≠ d·ª•ng th·ªùi gian ∆∞·ªõc t√≠nh n·∫øu c√≥
                hours_original = time_original / 3600
            elif story_points:
                # N·∫øu kh√¥ng c√≥ th·ªùi gian ∆∞·ªõc t√≠nh nh∆∞ng c√≥ story points,
                # quy ƒë·ªïi 1 SP = 1 gi·ªù
                hours_original = story_points

            stats["total_hours_original"] += hours_original
            assignee_hours_original[assignee_name] += hours_original

            # Th·ªùi gian c√≤n l·∫°i
            time_remaining = fields.get("timeestimate", 0)
            if time_remaining:
                hours_remaining = time_remaining / 3600
                stats["total_hours_remaining"] += hours_remaining
                assignee_hours_remaining[assignee_name] += hours_remaining
            elif hours_original and not fields.get("timespent"):
                # N·∫øu kh√¥ng c√≥ timeestimate v√† kh√¥ng c√≥ timespent,
                # d√πng gi·ªù ∆∞·ªõc t√≠nh ban ƒë·∫ßu l√†m th·ªùi gian c√≤n l·∫°i
                hours_remaining = hours_original
                stats["total_hours_remaining"] += hours_remaining
                assignee_hours_remaining[assignee_name] += hours_remaining

            # Th·ªùi gian ƒë√£ d√πng
            time_spent = fields.get("timespent", 0)
            if time_spent:
                hours_spent = time_spent / 3600
                stats["total_hours_spent"] += hours_spent
                assignee_hours_spent[assignee_name] += hours_spent

        # T·ªïng h·ª£p th√¥ng tin theo assignee
        for assignee in assignee_issues:
            stats["by_assignee"][assignee] = {
                "issues": assignee_issues[assignee],
                "hours_original": assignee_hours_original[assignee],
                "hours_remaining": assignee_hours_remaining[assignee],
                "hours_spent": assignee_hours_spent[assignee],
            }

        return stats

    def get_next_sprint(self, project_key=None):
        """L·∫•y sprint ti·∫øp theo (future sprint g·∫ßn nh·∫•t ho·∫∑c active sprint)

        Args:
            project_key (str, optional): M√£ d·ª± √°n ƒë·ªÉ ghi ƒë√® m·∫∑c ƒë·ªãnh

        Returns:
            dict: Th√¥ng tin sprint ti·∫øp theo ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        if project_key is None:
            project_key = self.project_key

        # L·∫•y t·∫•t c·∫£ sprints
        all_sprints = self.get_project_sprints(project_key)

        if not all_sprints:
            return None

        # T√¨m future sprints v√† active sprints
        future_sprints = [s for s in all_sprints if s.get("state") == "future"]
        active_sprints = [s for s in all_sprints if s.get("state") == "active"]

        # ∆Øu ti√™n future sprint g·∫ßn nh·∫•t (s·∫Øp x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈©)
        if future_sprints:
            # L∆∞u √Ω: all_sprints ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo startDate (n·∫øu c√≥)
            return future_sprints[0]

        # N·∫øu kh√¥ng c√≥ future sprint, l·∫•y active sprint
        if active_sprints:
            return active_sprints[0]

        # N·∫øu kh√¥ng c√≥ c·∫£ future v√† active, l·∫•y sprint ƒë·∫ßu ti√™n
        return all_sprints[0]

    def get_target_capacity_from_sprint_name(
        self, sprint_name, team_members_count=None
    ):
        """T√≠nh t·ªïng capacity d·ª±a tr√™n t√™n sprint (t√°ch s·ªë)

        Args:
            sprint_name (str): T√™n sprint
            team_members_count (int, optional): S·ªë l∆∞·ª£ng th√†nh vi√™n team (kh√¥ng c√≤n s·ª≠ d·ª•ng)

        Returns:
            tuple: (s·ªë trong t√™n sprint, s·ªë ng√†y l√†m vi·ªác, s·ªë gi·ªù m·ªói ng√†y)
        """
        # T√°ch s·ªë t·ª´ t√™n sprint
        numbers = re.findall(r"\d+", sprint_name)
        if not numbers:
            # Kh√¥ng t√¨m th·∫•y s·ªë, m·∫∑c ƒë·ªãnh d√πng 5 ng√†y l√†m vi·ªác
            return (None, 5, 8)

        sprint_number = int(numbers[0])

        # T√≠nh s·ªë ng√†y l√†m vi·ªác d·ª±a tr√™n s·ªë ch·∫µn/l·∫ª
        work_days = 5 if sprint_number % 2 == 0 else 6  # Ch·∫µn: 5 ng√†y, l·∫ª: 6 ng√†y
        hours_per_day = 8

        return (sprint_number, work_days, hours_per_day)


def display_sprint_stats():
    """Hi·ªÉn th·ªã th·ªëng k√™ sprint"""

    st.title("üìä Th·ªëng K√™ K·∫ø Ho·∫°ch Sprint")

    # Kh·ªüi t·∫°o c√°c gi√° tr·ªã trong session_state n·∫øu ch∆∞a c√≥
    if "selected_sprint_id" not in st.session_state:
        st.session_state.selected_sprint_id = None
    if "selected_project" not in st.session_state:
        st.session_state.selected_project = None
    if "sprint_issues" not in st.session_state:
        st.session_state.sprint_issues = None
    if "non_project_count" not in st.session_state:
        st.session_state.non_project_count = 0
    if "excluded_count" not in st.session_state:
        st.session_state.excluded_count = 0

    # Kh·ªüi t·∫°o d·ªãch v·ª•
    stat_service = SprintStatService()

    # N√∫t t·∫£i l·∫°i d·ªØ li·ªáu ·ªü ƒë·∫ßu trang
    reload_button = st.button("üîÑ T·∫£i l·∫°i d·ªØ li·ªáu", help="T·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ Jira")
    
    # Sidebar cho c·∫•u h√¨nh
    st.sidebar.header("C·∫•u h√¨nh")

    # Ch·ªçn d·ª± √°n
    projects = stat_service.jira.get_all_projects()
    project_options = {p["key"]: p["name"] for p in projects}

    selected_project = st.sidebar.selectbox(
        "Ch·ªçn d·ª± √°n",
        options=list(project_options.keys()),
        format_func=lambda x: f"{x} - {project_options.get(x, '')}",
        index=(
            list(project_options.keys()).index(DEFAULT_PROJECT)
            if DEFAULT_PROJECT in project_options
            else 0
        ),
    )

    # C·∫≠p nh·∫≠t d·ª± √°n ƒë∆∞·ª£c ch·ªçn
    stat_service.project_key = selected_project

    # L·∫•y danh s√°ch sprint
    sprints = stat_service.get_project_sprints(selected_project)

    if not sprints:
        st.warning(f"Kh√¥ng t√¨m th·∫•y sprint n√†o cho d·ª± √°n {selected_project}")
        return

    # T√¨m sprint ti·∫øp theo ƒë·ªÉ ch·ªçn m·∫∑c ƒë·ªãnh
    next_sprint = stat_service.get_next_sprint(selected_project)

    # Ch·ªçn sprint ƒë·ªÉ ph√¢n t√≠ch
    sprint_options = {s["id"]: s["name"] for s in sprints}

    # X√°c ƒë·ªãnh index m·∫∑c ƒë·ªãnh cho selectbox
    default_index = 0  # M·∫∑c ƒë·ªãnh l√† sprint ƒë·∫ßu ti√™n
    if next_sprint:
        try:
            default_index = list(sprint_options.keys()).index(next_sprint["id"])
        except (ValueError, KeyError):
            pass

    selected_sprint_id = st.sidebar.selectbox(
        "Ch·ªçn Sprint",
        options=list(sprint_options.keys()),
        format_func=lambda x: f"{sprint_options.get(x, '')} (ID: {x})",
        index=default_index,
    )

    # L·∫•y th√¥ng tin chi ti·∫øt c·ªßa sprint ƒë√£ ch·ªçn
    selected_sprint = next((s for s in sprints if s["id"] == selected_sprint_id), None)

    if not selected_sprint:
        st.error("Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin sprint ƒë√£ ch·ªçn")
        return

    # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa sprint
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Th√¥ng tin Sprint")
        st.info(f"**T√™n Sprint:** {selected_sprint.get('name')}")

        # Ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start_date = selected_sprint.get("startDate")
        end_date = selected_sprint.get("endDate")
        state = selected_sprint.get("state", "")

        if start_date:
            start_date = datetime.fromisoformat(start_date.replace("Z", "+00:00"))
            st.info(f"**Ng√†y b·∫Øt ƒë·∫ßu:** {start_date.strftime('%d/%m/%Y')}")

        if end_date:
            end_date = datetime.fromisoformat(end_date.replace("Z", "+00:00"))
            st.info(f"**Ng√†y k·∫øt th√∫c:** {end_date.strftime('%d/%m/%Y')}")

        st.info(f"**Tr·∫°ng th√°i:** {state.capitalize()}")

        # T√≠nh to√°n target capacity d·ª±a tr√™n t√™n sprint
        # L·∫•y s·ªë l∆∞·ª£ng th√†nh vi√™n c√≥ issue trong sprint
        active_members_count = (
            len(stats["by_assignee"].keys()) if "stats" in locals() else 0
        )

        # T√≠nh th·ªùi gian m·ª•c ti√™u
        sprint_number, work_days, hours_per_day = (
            stat_service.get_target_capacity_from_sprint_name(
                selected_sprint.get("name", "")
            )
        )

        # Hi·ªÉn th·ªã ƒë·ªãnh m·ª©c l√†m vi·ªác (kh√¥ng ph·ª• thu·ªôc s·ªë ng∆∞·ªùi)
        if sprint_number is not None:
            st.info(
                f"**ƒê·ªãnh m·ª©c l√†m vi·ªác:** {work_days} ng√†y √ó {hours_per_day} gi·ªù/ng√†y"
            )
        else:
            st.info(f"**ƒê·ªãnh m·ª©c l√†m vi·ªác:** 5 ng√†y √ó 8 gi·ªù/ng√†y")

        # T√≠nh t·ªïng gi·ªù m·ª•c ti√™u cho team
        target_hours = work_days * hours_per_day * active_members_count

    # L·∫•y v√† hi·ªÉn th·ªã th·ªëng k√™ issues c·ªßa sprint
    def get_and_filter_sprint_issues(sprint_id, project_key):
        """L·∫•y v√† l·ªçc d·ªØ li·ªáu issues t·ª´ Jira"""
        # L·∫•y issues t·ª´ sprint
        sprint_issues = stat_service.get_sprint_issues(sprint_id)

        if not sprint_issues:
            return None, 0, 0
            
        # L·ªçc c√°c issue kh√¥ng thu·ªôc d·ª± √°n hi·ªán t·∫°i
        project_issues = []
        non_project_count = 0
        
        for issue in sprint_issues:
            # Ki·ªÉm tra d·ª± √°n c·ªßa issue
            issue_key = issue.get("key", "")
            if issue_key.startswith(project_key + "-"):
                project_issues.append(issue)
            else:
                non_project_count += 1
        
        # L·ªçc c√°c issue kh√¥ng h·ª£p l·ªá
        excluded_statuses = ["Dev Done", "Test Done", "Deployed", "Done"]
        filtered_issues = []
        excluded_count = 0

        for issue in project_issues:
            fields = issue.get("fields", {})

            # Ki·ªÉm tra lo·∫°i issue
            issue_type = fields.get("issuetype", {}).get("name", "")
            if issue_type.lower() == "epic":
                excluded_count += 1
                continue

            # Ki·ªÉm tra tr·∫°ng th√°i
            status = fields.get("status", {}).get("name", "")
            if status in excluded_statuses:
                excluded_count += 1
                continue

            # Ki·ªÉm tra c√≥ subtasks kh√¥ng
            subtasks = fields.get("subtasks", [])
            if subtasks and len(subtasks) > 0:
                excluded_count += 1
                continue

            # Th√™m v√†o danh s√°ch ƒë√£ l·ªçc
            filtered_issues.append(issue)
            
        return filtered_issues, non_project_count, excluded_count
    
    # Ki·ªÉm tra v√† t·∫£i d·ªØ li·ªáu m·ªõi n·∫øu c·∫ßn
    need_reload = (
        reload_button or 
        st.session_state.sprint_issues is None or
        st.session_state.selected_sprint_id != selected_sprint_id or
        st.session_state.selected_project != selected_project
    )
    
    if need_reload:
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu issues..."):
            try:
                filtered_issues, non_project_count, excluded_count = get_and_filter_sprint_issues(
                    selected_sprint_id, selected_project
                )
                
                # L∆∞u v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i
                st.session_state.sprint_issues = filtered_issues
                st.session_state.non_project_count = non_project_count
                st.session_state.excluded_count = excluded_count
                st.session_state.selected_sprint_id = selected_sprint_id
                st.session_state.selected_project = selected_project
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
                return
    else:
        # S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l∆∞u trong session state
        filtered_issues = st.session_state.sprint_issues
        non_project_count = st.session_state.non_project_count
        excluded_count = st.session_state.excluded_count
    
    # Hi·ªÉn th·ªã th√¥ng b√°o
    if non_project_count > 0:
        st.info(f"ƒê√£ lo·∫°i b·ªè {non_project_count} issues kh√¥ng thu·ªôc d·ª± √°n {selected_project}")
    
    if excluded_count > 0:
        st.info(f"ƒê√£ lo·∫°i b·ªè {excluded_count} issues kh√¥ng ph√π h·ª£p (Epic, c√≥ subtasks, ho·∫∑c ƒë√£ ho√†n th√†nh)")
    
    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ issues h·ª£p l·ªá
    if not filtered_issues:
        st.warning(f"Sprint {selected_sprint.get('name')} kh√¥ng c√≥ issues h·ª£p l·ªá sau khi l·ªçc")
        return
    
    # S·ª≠ d·ª•ng issues ƒë√£ l·ªçc
    sprint_issues = filtered_issues

    # T√≠nh to√°n th·ªëng k√™
    stats = stat_service.calculate_sprint_stats(sprint_issues)

    # Hi·ªÉn th·ªã t·ªïng quan
    with col2:
        st.subheader("T·ªïng Quan")

        # Metrics
        st.metric("T·ªïng s·ªë issues", stats["total_issues"])

        # T√≠nh to√°n target capacity n·∫øu ch∆∞a c√≥
        if "target_hours" not in locals():
            active_members_count = len(stats["by_assignee"].keys())
            sprint_number, work_days, hours_per_day = (
                stat_service.get_target_capacity_from_sprint_name(
                    selected_sprint.get("name", "")
                )
            )
            target_hours = work_days * hours_per_day * active_members_count

        # T√≠nh t·ª∑ l·ªá ho√†n th√†nh (v·∫´n t√≠nh nh∆∞ng kh√¥ng hi·ªÉn th·ªã)
        completion_rate = (
            (stats["total_hours_original"] / target_hours) * 100
            if target_hours > 0
            else 0
        )
        remaining_rate = (
            (stats["total_hours_remaining"] / target_hours) * 100
            if target_hours > 0
            else 0
        )

        # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë th·ªùi gian tr√™n c√πng m·ªôt h√†ng
        time_col1, time_col2, time_col3 = st.columns(3)
        with time_col1:
            st.metric("D·ª± ki·∫øn (gi·ªù)", f"{stats['total_hours_original']:.1f}h")
        with time_col2:
            st.metric("ƒê√£ est (gi·ªù)", f"{stats['total_hours_remaining']:.1f}h")
        with time_col3:
            st.metric("ƒê√£ c√≥ log (gi·ªù)", f"{stats['total_hours_spent']:.1f}h")

    # Hi·ªÉn th·ªã ph√¢n b·ªï theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n
    st.subheader("Th·ªëng k√™ theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n")

    # T√≠nh to√°n th·ªùi gian m·ª•c ti√™u cho m·ªói ng∆∞·ªùi
    if "average_target_per_person" not in locals():
        sprint_number, work_days, hours_per_day = (
            stat_service.get_target_capacity_from_sprint_name(
                selected_sprint.get("name", "")
            )
        )
        average_target_per_person = work_days * hours_per_day

    # Chuy·ªÉn slider t·ª´ d·∫°ng % sang d·∫°ng s·ªë gi·ªù
    max_hours = work_days * hours_per_day  # S·ªë gi·ªù l√†m vi·ªác t·ªëi ƒëa trong tu·∫ßn
    adjusted_target = st.slider(
        "ƒêi·ªÅu ch·ªânh m·ª•c ti√™u (gi·ªù)",
        min_value=0,
        max_value=max_hours,
        value=max_hours,
        step=4,
        help="ƒêi·ªÅu ch·ªânh s·ªë gi·ªù m·ª•c ti√™u l√†m vi·ªác cho m·ªói ng∆∞·ªùi",
    )

    # T√≠nh to√°n ph·∫ßn trƒÉm t∆∞∆°ng ·ª©ng ƒë·ªÉ hi·ªÉn th·ªã
    if average_target_per_person > 0:
        target_percentage = int((adjusted_target / average_target_per_person) * 100)
    else:
        target_percentage = 100

    st.info(
        f"M·ª•c ti√™u g·ªëc: {average_target_per_person:.1f}h/ng∆∞·ªùi | M·ª•c ti√™u ƒëi·ªÅu ch·ªânh: {adjusted_target:.1f}h/ng∆∞·ªùi ({target_percentage}%)"
    )

    # T·∫°o dataframe cho b·∫£ng assignee
    assignee_data = []

    for assignee, data in stats["by_assignee"].items():
        # T√≠nh % so v·ªõi m·ª•c ti√™u t√πy ch·ªânh
        target_percentage_value = (
            (data["hours_remaining"] / adjusted_target * 100)
            if adjusted_target > 0
            else 0
        )
        
        # T√≠nh s·ªë gi·ªù c√≤n tr·ªëng (free hours)
        free_hours = adjusted_target - data["hours_remaining"]

        assignee_data.append(
            {
                "Ng∆∞·ªùi ƒë∆∞·ª£c g√°n": assignee,
                "S·ªë issues": data["issues"],
                "D·ª± ki·∫øn (gi·ªù)": f"{data['hours_original']:.1f}h",
                "ƒê√£ c√≥ log (gi·ªù)": f"{data['hours_spent']:.1f}h",
                "ƒê√£ est (gi·ªù)": f"{data['hours_remaining']:.1f}h",
                "Gi·ªù tr·ªëng": f"{free_hours:.1f}h",
                "% so v·ªõi m·ª•c ti√™u": f"{target_percentage_value:.1f}%",
                "% m·ª•c ti√™u (s·ªë)": target_percentage_value,  # C·ªôt ·∫©n d√πng ƒë·ªÉ ƒë·ªãnh d·∫°ng m√†u
            }
        )

    # S·∫Øp x·∫øp theo s·ªë issues gi·∫£m d·∫ßn
    assignee_data = sorted(assignee_data, key=lambda x: x["S·ªë issues"], reverse=True)

    if assignee_data:
        df_assignee = pd.DataFrame(assignee_data)

        # √Åp d·ª•ng ƒë·ªãnh d·∫°ng m√†u n·ªÅn xanh cho c√°c h√†ng c√≥ % so v·ªõi m·ª•c ti√™u >= 80%
        def highlight_rows(row):
            # T·∫°o chu·ªói CSS tr·ªëng cho t·∫•t c·∫£ c√°c c·ªôt
            default = ""
            target_value = row["% m·ª•c ti√™u (s·ªë)"]

            # N·∫øu gi√° tr·ªã % so v·ªõi m·ª•c ti√™u >= 80%, b√¥i xanh to√†n b·ªô h√†ng
            if target_value >= 80:
                return ["background-color: #d4edda"] * len(row)  # M√†u xanh l√° nh·∫°t
            return [default] * len(row)

        # T·∫°o m·ªôt b·∫£n sao c·ªßa DataFrame ban ƒë·∫ßu (c√≥ ch·ª©a t·∫•t c·∫£ c√°c c·ªôt c·∫ßn thi·∫øt cho vi·ªác ƒë·ªãnh d·∫°ng)
        df_display = df_assignee.copy()

        # √Åp d·ª•ng ƒë·ªãnh d·∫°ng tr√™n DataFrame ban ƒë·∫ßu
        styled_original = df_assignee.style.apply(highlight_rows, axis=1)

        # T·∫°o m·ªôt DataFrame m·ªõi kh√¥ng c√≥ c·ªôt c·∫ßn ·∫©n
        df_display = df_assignee.drop(columns=["% m·ª•c ti√™u (s·ªë)"])

        # ƒê·ªãnh d·∫°ng h√†m highlight m·ªõi cho DataFrame ƒë√£ lo·∫°i b·ªè c·ªôt
        def highlight_rows_display(row):
            value_dict = row.to_dict()
            target_value = float(value_dict["% so v·ªõi m·ª•c ti√™u"].replace("%", ""))

            # N·∫øu gi√° tr·ªã % so v·ªõi m·ª•c ti√™u >= 80%, b√¥i xanh to√†n b·ªô h√†ng
            if target_value >= 80:
                return ["background-color: #d4edda"] * len(row)  # M√†u xanh l√° nh·∫°t
            return [""] * len(row)

        # √Åp d·ª•ng ƒë·ªãnh d·∫°ng cho DataFrame ƒë√£ lo·∫°i b·ªè c·ªôt
        styled_df = df_display.style.apply(highlight_rows_display, axis=1)

        st.dataframe(styled_df, use_container_width=True)

        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªï c√¥ng vi·ªác
        try:
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
            chart_data = []
            for assignee, data in stats["by_assignee"].items():
                free_hours = adjusted_target - data["hours_remaining"]
                chart_data.append(
                    {
                        "Ng∆∞·ªùi ƒë∆∞·ª£c g√°n": assignee,
                        "S·ªë gi·ªù d·ª± ki·∫øn": data["hours_original"],
                        "ƒê√£ est (gi·ªù)": data["hours_remaining"],
                        "S·ªë gi·ªù ƒë√£ c√≥ log": data["hours_spent"],
                        "Gi·ªù tr·ªëng": free_hours,
                    }
                )

            if chart_data:
                df_chart = pd.DataFrame(chart_data)

                # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt so s√°nh ∆∞·ªõc t√≠nh v√† c√≤n l·∫°i
                fig = go.Figure()

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["S·ªë gi·ªù d·ª± ki·∫øn"],
                        name="D·ª± ki·∫øn",
                        marker_color="rgb(55, 83, 109)",
                        visible="legendonly",  # ·∫®n m·∫∑c ƒë·ªãnh
                    )
                )

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["ƒê√£ est (gi·ªù)"],
                        name="ƒê√£ est",
                        marker_color="rgb(26, 118, 255)",
                        visible=True,  # Hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh
                    )
                )

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["Gi·ªù tr·ªëng"],
                        name="Gi·ªù tr·ªëng",
                        marker_color="rgb(46, 204, 113)",
                        visible="legendonly",  # ·∫®n m·∫∑c ƒë·ªãnh
                    )
                )

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["S·ªë gi·ªù ƒë√£ c√≥ log"],
                        name="ƒê√£ c√≥ log",
                        marker_color="rgb(219, 64, 82)",
                        visible="legendonly",  # ·∫®n m·∫∑c ƒë·ªãnh, ch·ªâ hi·ªán khi b·∫•m v√†o legend
                    )
                )

                # Th√™m ƒë∆∞·ªùng target line g·ªëc (ƒë·ªïi th√†nh d·∫°ng "legendonly")
                fig.add_trace(
                    go.Scatter(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=[average_target_per_person] * len(df_chart),
                        mode="lines",
                        name=f"M·ª•c ti√™u g·ªëc ({average_target_per_person:.1f}h/ng∆∞·ªùi)",
                        line=dict(color="gray", width=2, dash="dash"),
                        visible="legendonly",  # ·∫®n m·∫∑c ƒë·ªãnh
                    )
                )

                # Th√™m ƒë∆∞·ªùng target line ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh
                fig.add_trace(
                    go.Scatter(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=[adjusted_target] * len(df_chart),
                        mode="lines",
                        name=f"M·ª•c ti√™u ƒëi·ªÅu ch·ªânh ({adjusted_target:.1f}h/ng∆∞·ªùi - {target_percentage}%)",
                        line=dict(color="red", width=2, dash="dash"),
                    )
                )

                fig.update_layout(
                    title="Ph√¢n b·ªï th·ªùi gian l√†m vi·ªác theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n<br><sup>(B·∫•m v√†o ch√∫ th√≠ch ƒë·ªÉ hi·ªÉn th·ªã/·∫©n c√°c lo·∫°i th·ªùi gian)</sup>",
                    xaxis=dict(tickfont=dict(size=12)),
                    yaxis=dict(
                        title=dict(text="S·ªë gi·ªù", font=dict(size=14)),
                        tickfont=dict(size=12),
                    ),
                    legend=dict(
                        x=1.02,  # ƒê·∫∑t legend b√™n ngo√†i bi·ªÉu ƒë·ªì, ph√≠a b√™n ph·∫£i
                        y=1.0,  # CƒÉn ch·ªânh theo ph√≠a tr√™n c√πng
                        xanchor="left",  # Neo b√™n tr√°i c·ªßa legend
                        yanchor="top",  # Neo ph√≠a tr√™n c·ªßa legend
                        orientation="v",  # S·∫Øp x·∫øp theo chi·ªÅu d·ªçc (v thay v√¨ vertical)
                        bgcolor="rgba(255, 255, 255, 0.8)",  # N·ªÅn h∆°i ƒë·ª•c ƒë·ªÉ d·ªÖ ƒë·ªçc
                        bordercolor="rgba(0, 0, 0, 0.1)",  # Vi·ªÅn m·ªèng
                        borderwidth=1,  # ƒê·ªô d√†y vi·ªÅn
                        font=dict(size=12),  # K√≠ch th∆∞·ªõc font
                    ),
                    barmode="group",
                    bargap=0.15,
                    bargroupgap=0.1,
                    margin=dict(r=150),  # TƒÉng l·ªÅ b√™n ph·∫£i ƒë·ªÉ c√≥ ch·ªó cho legend
                )

                st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")

    # Hi·ªÉn th·ªã danh s√°ch issues
    with st.expander("Xem danh s√°ch issues c·ªßa sprint", expanded=False):
        # T·∫°o dataframe hi·ªÉn th·ªã
        issue_data = []
        for issue in sprint_issues:
            # Tr√≠ch xu·∫•t th√¥ng tin
            fields = issue.get("fields", {})

            # Assignee
            assignee = fields.get("assignee", {})
            assignee_name = (
                assignee.get("displayName", "Ch∆∞a g√°n") if assignee else "Ch∆∞a g√°n"
            )

            # Th·ªùi gian d·ª± ki·∫øn (t·ª´ story points ho·∫∑c timeoriginalestimate)
            time_original = fields.get("timeoriginalestimate")
            story_points = fields.get("customfield_10016")
            time_original_hours = None

            if time_original:
                time_original_hours = time_original / 3600
            elif story_points:
                time_original_hours = story_points

            # Th·ªùi gian c√≤n l·∫°i
            time_remaining = fields.get("timeestimate")
            time_remaining_hours = time_remaining / 3600 if time_remaining else None

            if (
                not time_remaining_hours
                and time_original_hours
                and not fields.get("timespent")
            ):
                time_remaining_hours = time_original_hours

            # Th·ªùi gian ƒë√£ d√πng
            time_spent = fields.get("timespent")
            time_spent_hours = time_spent / 3600 if time_spent else None

            issue_data.append(
                {
                    "Key": issue.get("key"),
                    "Lo·∫°i": fields.get("issuetype", {}).get("name", ""),
                    "Ti√™u ƒë·ªÅ": fields.get("summary", ""),
                    "Tr·∫°ng th√°i": fields.get("status", {}).get("name", ""),
                    "Ng∆∞·ªùi ƒë∆∞·ª£c g√°n": assignee_name,
                    "D·ª± ki·∫øn (gi·ªù)": (
                        f"{time_original_hours:.1f}h" if time_original_hours else ""
                    ),
                    "ƒê√£ est (gi·ªù)": (
                        f"{time_remaining_hours:.1f}h" if time_remaining_hours else ""
                    ),
                    "ƒê√£ c√≥ log (gi·ªù)": (
                        f"{time_spent_hours:.1f}h" if time_spent_hours else ""
                    ),
                }
            )

        if issue_data:
            df_issues = pd.DataFrame(issue_data)
            
            # Container cho b·ªô l·ªçc v√† thanh t√¨m ki·∫øm
            filter_container = st.container()
            
            with filter_container:
                # Th√™m thanh t√¨m ki·∫øm
                search_col, est_col, assigned_col = st.columns(3)
                
                with search_col:
                    search_query = st.text_input("üîç T√¨m ki·∫øm", placeholder="Nh·∫≠p t·ª´ kh√≥a...")
                    
                with est_col:
                    show_no_estimate = st.checkbox(
                        "Hi·ªÉn th·ªã issues ch∆∞a c√≥ est", value=True
                    )
                    
                with assigned_col:
                    # L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi ƒë∆∞·ª£c g√°n
                    assignees = df_issues["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"].unique().tolist()
                    assignees.insert(0, "T·∫•t c·∫£")  # Th√™m l·ª±a ch·ªçn "T·∫•t c·∫£" v√†o ƒë·∫ßu danh s√°ch
                    
                    selected_assignee = st.selectbox(
                        "L·ªçc theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n",
                        options=assignees,
                        index=0
                    )
            
            # √Åp d·ª•ng b·ªô l·ªçc
            filtered_df = df_issues.copy()
            
            # L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
            if search_query:
                mask = filtered_df.apply(
                    lambda row: any(
                        search_query.lower() in str(val).lower() 
                        for val in row.values
                    ), 
                    axis=1
                )
                filtered_df = filtered_df[mask]

            if not show_no_estimate:
                # L·ªçc ch·ªâ gi·ªØ l·∫°i c√°c issue c√≥ th·ªùi gian est
                filtered_df = filtered_df[filtered_df["ƒê√£ est (gi·ªù)"] != ""]
                
            # L·ªçc theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n
            if selected_assignee != "T·∫•t c·∫£":
                filtered_df = filtered_df[filtered_df["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"] == selected_assignee]

            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng issues sau khi l·ªçc
            st.caption(f"Hi·ªÉn th·ªã {len(filtered_df)} tr√™n t·ªïng s·ªë {len(df_issues)} issues")
            
            # Hi·ªÉn th·ªã dataframe ƒë√£ l·ªçc
            st.dataframe(filtered_df, use_container_width=True)


def main():
    # Hi·ªÉn th·ªã CSS cho b·∫£ng
    st.markdown(TAILWIND_TABLE_CSS, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã th·ªëng k√™ sprint
    display_sprint_stats()


if __name__ == "__main__":
    main()
