import streamlit as st
import os
import sys
import json
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import re

# Add the project root to the Python path
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(__file__))))

# Import from src modules
from src.config.config import (
    APP_TITLE,
    APP_LAYOUT,
    SIDEBAR_STATE,
    DEFAULT_TIMEZONE,
    DEFAULT_PROJECT,
    TAILWIND_TABLE_CSS,
)
from src.services.jira_client import JiraClient
from src.utils.date_utils import get_current_time

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(
    page_title="K·∫ø Ho·∫°ch Sprint",
    layout=APP_LAYOUT,
    initial_sidebar_state=SIDEBAR_STATE,
)


class SprintStatService:
    """D·ªãch v·ª• th·ªëng k√™ Sprint"""

    def __init__(self, project_key=DEFAULT_PROJECT):
        """Kh·ªüi t·∫°o d·ªãch v·ª• th·ªëng k√™ Sprint

        Args:
            project_key (str, optional): M√£ d·ª± √°n Jira
        """
        self.jira = JiraClient()
        self.project_key = project_key

    def get_project_sprints(self, project_key=None):
        """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c sprint c·ªßa d·ª± √°n

        Args:
            project_key (str, optional): M√£ d·ª± √°n ƒë·ªÉ ghi ƒë√® m·∫∑c ƒë·ªãnh

        Returns:
            list: Danh s√°ch c√°c sprint
        """
        if project_key is None:
            project_key = self.project_key

        # L·∫•y t·∫•t c·∫£ sprint t·ª´ t·∫•t c·∫£ c√°c board c·ªßa d·ª± √°n
        all_sprints = self.jira.get_all_sprints(project_key)

        # S·∫Øp x·∫øp theo startDate (n·∫øu c√≥) ho·∫∑c t√™n
        return sorted(
            all_sprints,
            key=lambda s: s.get("startDate", s.get("name", "")),
            reverse=True,  # S·∫Øp x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈©
        )

    def get_sprint_issues(self, sprint_id, fields=None):
        """L·∫•y danh s√°ch issue c·ªßa sprint

        Args:
            sprint_id (int): ID c·ªßa sprint
            fields (list, optional): Danh s√°ch c√°c tr∆∞·ªùng c·∫ßn l·∫•y

        Returns:
            list: Danh s√°ch c√°c issue trong sprint
        """
        if fields is None:
            fields = [
                "summary",
                "issuetype",
                "priority",
                "assignee",
                "status",
                "customfield_10016",  # Story Points
                "timeoriginalestimate",
                "timeestimate",
                "timespent",
                "created",
                "subtasks",  # Th√™m tr∆∞·ªùng subtasks ƒë·ªÉ ki·ªÉm tra c√≥ subtasks kh√¥ng
            ]

        # L·∫•y t·∫•t c·∫£ issues c·ªßa sprint
        return self.jira.get_sprint_issues(sprint_id, fields=fields)

    def calculate_sprint_stats(self, sprint_issues):
        """T√≠nh to√°n th·ªëng k√™ cho sprint

        Args:
            sprint_issues (list): Danh s√°ch c√°c issue trong sprint

        Returns:
            dict: Th·ªëng k√™ c·ªßa sprint
        """
        stats = {
            "total_issues": len(sprint_issues),
            "by_status": {},
            "by_assignee": {},
            "total_hours_original": 0,
            "total_hours_remaining": 0,
            "total_hours_spent": 0,
        }

        assignee_issues = {}
        assignee_hours_original = {}
        assignee_hours_remaining = {}
        assignee_hours_spent = {}

        for issue in sprint_issues:
            fields = issue.get("fields", {})

            # Th·ªëng k√™ theo tr·∫°ng th√°i
            status = fields.get("status", {}).get("name", "Unknown")
            if status not in stats["by_status"]:
                stats["by_status"][status] = 0
            stats["by_status"][status] += 1

            # Th√¥ng tin assignee
            assignee = fields.get("assignee", {})
            assignee_name = (
                assignee.get("displayName", "Ch∆∞a g√°n") if assignee else "Ch∆∞a g√°n"
            )

            # Kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
            if assignee_name not in assignee_issues:
                assignee_issues[assignee_name] = 0
                assignee_hours_original[assignee_name] = 0
                assignee_hours_remaining[assignee_name] = 0
                assignee_hours_spent[assignee_name] = 0

            # ƒê·∫øm s·ªë issue
            assignee_issues[assignee_name] += 1

            # T√≠nh gi·ªù d·ª± ki·∫øn t·ª´ th·ªùi gian ∆∞·ªõc t√≠nh ho·∫∑c story points
            time_original = fields.get("timeoriginalestimate", 0)
            story_points = fields.get("customfield_10016", 0)
            hours_original = 0

            if time_original:
                # S·ª≠ d·ª•ng th·ªùi gian ∆∞·ªõc t√≠nh n·∫øu c√≥
                hours_original = time_original / 3600
            elif story_points:
                # N·∫øu kh√¥ng c√≥ th·ªùi gian ∆∞·ªõc t√≠nh nh∆∞ng c√≥ story points,
                # quy ƒë·ªïi 1 SP = 1 gi·ªù
                hours_original = story_points

            stats["total_hours_original"] += hours_original
            assignee_hours_original[assignee_name] += hours_original

            # Th·ªùi gian c√≤n l·∫°i
            time_remaining = fields.get("timeestimate", 0)
            if time_remaining:
                hours_remaining = time_remaining / 3600
                stats["total_hours_remaining"] += hours_remaining
                assignee_hours_remaining[assignee_name] += hours_remaining
            elif hours_original and not fields.get("timespent"):
                # N·∫øu kh√¥ng c√≥ timeestimate v√† kh√¥ng c√≥ timespent,
                # d√πng gi·ªù ∆∞·ªõc t√≠nh ban ƒë·∫ßu l√†m th·ªùi gian c√≤n l·∫°i
                hours_remaining = hours_original
                stats["total_hours_remaining"] += hours_remaining
                assignee_hours_remaining[assignee_name] += hours_remaining

            # Th·ªùi gian ƒë√£ d√πng
            time_spent = fields.get("timespent", 0)
            if time_spent:
                hours_spent = time_spent / 3600
                stats["total_hours_spent"] += hours_spent
                assignee_hours_spent[assignee_name] += hours_spent

        # T·ªïng h·ª£p th√¥ng tin theo assignee
        for assignee in assignee_issues:
            stats["by_assignee"][assignee] = {
                "issues": assignee_issues[assignee],
                "hours_original": assignee_hours_original[assignee],
                "hours_remaining": assignee_hours_remaining[assignee],
                "hours_spent": assignee_hours_spent[assignee],
            }

        return stats

    def get_next_sprint(self, project_key=None):
        """L·∫•y sprint ti·∫øp theo (future sprint g·∫ßn nh·∫•t ho·∫∑c active sprint)

        Args:
            project_key (str, optional): M√£ d·ª± √°n ƒë·ªÉ ghi ƒë√® m·∫∑c ƒë·ªãnh

        Returns:
            dict: Th√¥ng tin sprint ti·∫øp theo ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        if project_key is None:
            project_key = self.project_key

        # L·∫•y t·∫•t c·∫£ sprints
        all_sprints = self.get_project_sprints(project_key)

        if not all_sprints:
            return None

        # T√¨m future sprints v√† active sprints
        future_sprints = [s for s in all_sprints if s.get("state") == "future"]
        active_sprints = [s for s in all_sprints if s.get("state") == "active"]

        # ∆Øu ti√™n future sprint g·∫ßn nh·∫•t (s·∫Øp x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈©)
        if future_sprints:
            # L∆∞u √Ω: all_sprints ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo startDate (n·∫øu c√≥)
            return future_sprints[0]

        # N·∫øu kh√¥ng c√≥ future sprint, l·∫•y active sprint
        if active_sprints:
            return active_sprints[0]

        # N·∫øu kh√¥ng c√≥ c·∫£ future v√† active, l·∫•y sprint ƒë·∫ßu ti√™n
        return all_sprints[0]

    def get_target_capacity_from_sprint_name(
        self, sprint_name, team_members_count=None
    ):
        """T√≠nh t·ªïng capacity d·ª±a tr√™n t√™n sprint (t√°ch s·ªë)

        Args:
            sprint_name (str): T√™n sprint
            team_members_count (int, optional): S·ªë l∆∞·ª£ng th√†nh vi√™n team (kh√¥ng c√≤n s·ª≠ d·ª•ng)

        Returns:
            tuple: (s·ªë trong t√™n sprint, s·ªë ng√†y l√†m vi·ªác, s·ªë gi·ªù m·ªói ng√†y)
        """
        # T√°ch s·ªë t·ª´ t√™n sprint
        numbers = re.findall(r"\d+", sprint_name)
        if not numbers:
            # Kh√¥ng t√¨m th·∫•y s·ªë, m·∫∑c ƒë·ªãnh d√πng 5 ng√†y l√†m vi·ªác
            return (None, 5, 8)

        sprint_number = int(numbers[0])

        # T√≠nh s·ªë ng√†y l√†m vi·ªác d·ª±a tr√™n s·ªë ch·∫µn/l·∫ª
        work_days = 5 if sprint_number % 2 == 0 else 6  # Ch·∫µn: 5 ng√†y, l·∫ª: 6 ng√†y
        hours_per_day = 8

        return (sprint_number, work_days, hours_per_day)


def display_sprint_stats():
    """Hi·ªÉn th·ªã th·ªëng k√™ sprint"""

    st.title("üìä Th·ªëng K√™ K·∫ø Ho·∫°ch Sprint")

    # Kh·ªüi t·∫°o d·ªãch v·ª•
    stat_service = SprintStatService()

    # Sidebar cho c·∫•u h√¨nh
    st.sidebar.header("C·∫•u h√¨nh")

    # Ch·ªçn d·ª± √°n
    projects = stat_service.jira.get_all_projects()
    project_options = {p["key"]: p["name"] for p in projects}

    selected_project = st.sidebar.selectbox(
        "Ch·ªçn d·ª± √°n",
        options=list(project_options.keys()),
        format_func=lambda x: f"{x} - {project_options.get(x, '')}",
        index=(
            list(project_options.keys()).index(DEFAULT_PROJECT)
            if DEFAULT_PROJECT in project_options
            else 0
        ),
    )

    # C·∫≠p nh·∫≠t d·ª± √°n ƒë∆∞·ª£c ch·ªçn
    stat_service.project_key = selected_project

    # L·∫•y danh s√°ch sprint
    sprints = stat_service.get_project_sprints(selected_project)

    if not sprints:
        st.warning(f"Kh√¥ng t√¨m th·∫•y sprint n√†o cho d·ª± √°n {selected_project}")
        return

    # T√¨m sprint ti·∫øp theo ƒë·ªÉ ch·ªçn m·∫∑c ƒë·ªãnh
    next_sprint = stat_service.get_next_sprint(selected_project)

    # Ch·ªçn sprint ƒë·ªÉ ph√¢n t√≠ch
    sprint_options = {s["id"]: s["name"] for s in sprints}

    # X√°c ƒë·ªãnh index m·∫∑c ƒë·ªãnh cho selectbox
    default_index = 0  # M·∫∑c ƒë·ªãnh l√† sprint ƒë·∫ßu ti√™n
    if next_sprint:
        try:
            default_index = list(sprint_options.keys()).index(next_sprint["id"])
        except (ValueError, KeyError):
            pass

    selected_sprint_id = st.sidebar.selectbox(
        "Ch·ªçn Sprint",
        options=list(sprint_options.keys()),
        format_func=lambda x: sprint_options.get(x, ""),
        index=default_index,
    )

    # L·∫•y th√¥ng tin chi ti·∫øt c·ªßa sprint ƒë√£ ch·ªçn
    selected_sprint = next((s for s in sprints if s["id"] == selected_sprint_id), None)

    if not selected_sprint:
        st.error("Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin sprint ƒë√£ ch·ªçn")
        return

    # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n c·ªßa sprint
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Th√¥ng tin Sprint")
        st.info(f"**T√™n Sprint:** {selected_sprint.get('name')}")

        # Ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start_date = selected_sprint.get("startDate")
        end_date = selected_sprint.get("endDate")
        state = selected_sprint.get("state", "")

        if start_date:
            start_date = datetime.fromisoformat(start_date.replace("Z", "+00:00"))
            st.info(f"**Ng√†y b·∫Øt ƒë·∫ßu:** {start_date.strftime('%d/%m/%Y')}")

        if end_date:
            end_date = datetime.fromisoformat(end_date.replace("Z", "+00:00"))
            st.info(f"**Ng√†y k·∫øt th√∫c:** {end_date.strftime('%d/%m/%Y')}")

        st.info(f"**Tr·∫°ng th√°i:** {state.capitalize()}")

        # T√≠nh to√°n target capacity d·ª±a tr√™n t√™n sprint
        # L·∫•y s·ªë l∆∞·ª£ng th√†nh vi√™n c√≥ issue trong sprint
        active_members_count = (
            len(stats["by_assignee"].keys()) if "stats" in locals() else 0
        )

        # T√≠nh th·ªùi gian m·ª•c ti√™u
        sprint_number, work_days, hours_per_day = (
            stat_service.get_target_capacity_from_sprint_name(
                selected_sprint.get("name", "")
            )
        )

        # Hi·ªÉn th·ªã ƒë·ªãnh m·ª©c l√†m vi·ªác (kh√¥ng ph·ª• thu·ªôc s·ªë ng∆∞·ªùi)
        if sprint_number is not None:
            st.info(
                f"**ƒê·ªãnh m·ª©c l√†m vi·ªác:** {work_days} ng√†y √ó {hours_per_day} gi·ªù/ng√†y"
            )
        else:
            st.info(f"**ƒê·ªãnh m·ª©c l√†m vi·ªác:** 5 ng√†y √ó 8 gi·ªù/ng√†y")

        # T√≠nh t·ªïng gi·ªù m·ª•c ti√™u cho team
        target_hours = work_days * hours_per_day * active_members_count

    # L·∫•y v√† hi·ªÉn th·ªã th·ªëng k√™ issues c·ªßa sprint
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu issues..."):
        sprint_issues = stat_service.get_sprint_issues(selected_sprint_id)

        if not sprint_issues:
            st.warning(f"Sprint {selected_sprint.get('name')} kh√¥ng c√≥ issues n√†o")
            return

        # L·ªçc c√°c issue kh√¥ng h·ª£p l·ªá
        excluded_statuses = ["Dev Done", "Test Done", "Deployed", "Done"]
        filtered_issues = []
        excluded_count = 0

        for issue in sprint_issues:
            fields = issue.get("fields", {})

            # Ki·ªÉm tra lo·∫°i issue
            issue_type = fields.get("issuetype", {}).get("name", "")
            if issue_type.lower() == "epic":
                excluded_count += 1
                continue

            # Ki·ªÉm tra tr·∫°ng th√°i
            status = fields.get("status", {}).get("name", "")
            if status in excluded_statuses:
                excluded_count += 1
                continue

            # Ki·ªÉm tra c√≥ subtasks kh√¥ng
            subtasks = fields.get("subtasks", [])
            if subtasks and len(subtasks) > 0:
                excluded_count += 1
                continue

            # Th√™m v√†o danh s√°ch ƒë√£ l·ªçc
            filtered_issues.append(issue)

        # Hi·ªÉn th·ªã th√¥ng tin s·ªë l∆∞·ª£ng issue b·ªã lo·∫°i
        if excluded_count > 0:
            st.info(
                f"ƒê√£ lo·∫°i b·ªè {excluded_count} issues kh√¥ng ph√π h·ª£p (Epic, c√≥ subtasks, ho·∫∑c ƒë√£ ho√†n th√†nh)"
            )

        # S·ª≠ d·ª•ng danh s√°ch issues ƒë√£ l·ªçc
        sprint_issues = filtered_issues

        if not sprint_issues:
            st.warning(
                f"Sprint {selected_sprint.get('name')} kh√¥ng c√≥ issues h·ª£p l·ªá sau khi l·ªçc"
            )
            return

        # T√≠nh to√°n th·ªëng k√™
        stats = stat_service.calculate_sprint_stats(sprint_issues)

    # Hi·ªÉn th·ªã t·ªïng quan
    with col2:
        st.subheader("T·ªïng Quan")

        # Metrics
        st.metric("T·ªïng s·ªë issues", stats["total_issues"])

        # T√≠nh to√°n target capacity n·∫øu ch∆∞a c√≥
        if "target_hours" not in locals():
            active_members_count = len(stats["by_assignee"].keys())
            sprint_number, work_days, hours_per_day = (
                stat_service.get_target_capacity_from_sprint_name(
                    selected_sprint.get("name", "")
                )
            )
            target_hours = work_days * hours_per_day * active_members_count

        # T√≠nh t·ª∑ l·ªá ho√†n th√†nh (v·∫´n t√≠nh nh∆∞ng kh√¥ng hi·ªÉn th·ªã)
        completion_rate = (
            (stats["total_hours_original"] / target_hours) * 100
            if target_hours > 0
            else 0
        )
        remaining_rate = (
            (stats["total_hours_remaining"] / target_hours) * 100
            if target_hours > 0
            else 0
        )

        # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë th·ªùi gian tr√™n c√πng m·ªôt h√†ng
        time_col1, time_col2, time_col3 = st.columns(3)
        with time_col1:
            st.metric("D·ª± ki·∫øn (gi·ªù)", f"{stats['total_hours_original']:.1f}h")
        with time_col2:
            st.metric("C√≤n l·∫°i (gi·ªù)", f"{stats['total_hours_remaining']:.1f}h")
        with time_col3:
            st.metric("ƒê√£ d√πng (gi·ªù)", f"{stats['total_hours_spent']:.1f}h")

    # Hi·ªÉn th·ªã ph√¢n b·ªï theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n
    st.subheader("Th·ªëng k√™ theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n")

    # T·∫°o dataframe cho b·∫£ng assignee
    assignee_data = []

    for assignee, data in stats["by_assignee"].items():
        assignee_data.append(
            {
                "Ng∆∞·ªùi ƒë∆∞·ª£c g√°n": assignee,
                "S·ªë issues": data["issues"],
                "D·ª± ki·∫øn (gi·ªù)": f"{data['hours_original']:.1f}h",
                "C√≤n l·∫°i (gi·ªù)": f"{data['hours_remaining']:.1f}h",
                "ƒê√£ d√πng (gi·ªù)": f"{data['hours_spent']:.1f}h",
            }
        )

    # S·∫Øp x·∫øp theo s·ªë issues gi·∫£m d·∫ßn
    assignee_data = sorted(assignee_data, key=lambda x: x["S·ªë issues"], reverse=True)

    if assignee_data:
        df_assignee = pd.DataFrame(assignee_data)
        st.dataframe(df_assignee, use_container_width=True)

        # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªï c√¥ng vi·ªác
        try:
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
            chart_data = []
            for assignee, data in stats["by_assignee"].items():
                chart_data.append(
                    {
                        "Ng∆∞·ªùi ƒë∆∞·ª£c g√°n": assignee,
                        "S·ªë gi·ªù d·ª± ki·∫øn": data["hours_original"],
                        "S·ªë gi·ªù c√≤n l·∫°i": data["hours_remaining"],
                        "S·ªë gi·ªù ƒë√£ d√πng": data["hours_spent"],
                    }
                )

            if chart_data:
                df_chart = pd.DataFrame(chart_data)

                # T√≠nh to√°n th·ªùi gian m·ª•c ti√™u cho m·ªói ng∆∞·ªùi
                sprint_number, work_days, hours_per_day = (
                    stat_service.get_target_capacity_from_sprint_name(
                        selected_sprint.get("name", "")
                    )
                )
                average_target_per_person = work_days * hours_per_day

                # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt so s√°nh ∆∞·ªõc t√≠nh v√† c√≤n l·∫°i
                fig = go.Figure()

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["S·ªë gi·ªù d·ª± ki·∫øn"],
                        name="D·ª± ki·∫øn",
                        marker_color="rgb(55, 83, 109)",
                        visible=True,  # Hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh
                    )
                )

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["S·ªë gi·ªù c√≤n l·∫°i"],
                        name="C√≤n l·∫°i",
                        marker_color="rgb(26, 118, 255)",
                        visible=True,  # Hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh
                    )
                )

                fig.add_trace(
                    go.Bar(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=df_chart["S·ªë gi·ªù ƒë√£ d√πng"],
                        name="ƒê√£ d√πng",
                        marker_color="rgb(219, 64, 82)",
                        visible="legendonly",  # ·∫®n m·∫∑c ƒë·ªãnh, ch·ªâ hi·ªán khi b·∫•m v√†o legend
                    )
                )

                # Th√™m ƒë∆∞·ªùng target line
                fig.add_trace(
                    go.Scatter(
                        x=df_chart["Ng∆∞·ªùi ƒë∆∞·ª£c g√°n"],
                        y=[average_target_per_person] * len(df_chart),
                        mode="lines",
                        name=f"M·ª•c ti√™u ({average_target_per_person:.1f}h/ng∆∞·ªùi)",
                        line=dict(color="red", width=2, dash="dash"),
                    )
                )

                fig.update_layout(
                    title="Ph√¢n b·ªï th·ªùi gian l√†m vi·ªác theo ng∆∞·ªùi ƒë∆∞·ª£c g√°n<br><sup>(B·∫•m v√†o ch√∫ th√≠ch ƒë·ªÉ hi·ªÉn th·ªã/·∫©n c√°c lo·∫°i th·ªùi gian)</sup>",
                    xaxis=dict(tickfont=dict(size=12)),
                    yaxis=dict(
                        title=dict(text="S·ªë gi·ªù", font=dict(size=14)),
                        tickfont=dict(size=12),
                    ),
                    legend=dict(
                        x=0,
                        y=1.0,
                        bgcolor="rgba(255, 255, 255, 0)",
                        bordercolor="rgba(255, 255, 255, 0)",
                    ),
                    barmode="group",
                    bargap=0.15,
                    bargroupgap=0.1,
                )

                st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")

    # Hi·ªÉn th·ªã danh s√°ch issues
    with st.expander("Xem danh s√°ch issues c·ªßa sprint", expanded=False):
        # T·∫°o dataframe hi·ªÉn th·ªã
        issue_data = []
        for issue in sprint_issues:
            # Tr√≠ch xu·∫•t th√¥ng tin
            fields = issue.get("fields", {})

            # Assignee
            assignee = fields.get("assignee", {})
            assignee_name = (
                assignee.get("displayName", "Ch∆∞a g√°n") if assignee else "Ch∆∞a g√°n"
            )

            # Th·ªùi gian d·ª± ki·∫øn (t·ª´ story points ho·∫∑c timeoriginalestimate)
            time_original = fields.get("timeoriginalestimate")
            story_points = fields.get("customfield_10016")
            time_original_hours = None

            if time_original:
                time_original_hours = time_original / 3600
            elif story_points:
                time_original_hours = story_points

            # Th·ªùi gian c√≤n l·∫°i
            time_remaining = fields.get("timeestimate")
            time_remaining_hours = time_remaining / 3600 if time_remaining else None

            if (
                not time_remaining_hours
                and time_original_hours
                and not fields.get("timespent")
            ):
                time_remaining_hours = time_original_hours

            # Th·ªùi gian ƒë√£ d√πng
            time_spent = fields.get("timespent")
            time_spent_hours = time_spent / 3600 if time_spent else None

            issue_data.append(
                {
                    "Key": issue.get("key"),
                    "Lo·∫°i": fields.get("issuetype", {}).get("name", ""),
                    "Ti√™u ƒë·ªÅ": fields.get("summary", ""),
                    "Tr·∫°ng th√°i": fields.get("status", {}).get("name", ""),
                    "Ng∆∞·ªùi ƒë∆∞·ª£c g√°n": assignee_name,
                    "D·ª± ki·∫øn (gi·ªù)": (
                        f"{time_original_hours:.1f}h" if time_original_hours else ""
                    ),
                    "C√≤n l·∫°i (gi·ªù)": (
                        f"{time_remaining_hours:.1f}h" if time_remaining_hours else ""
                    ),
                    "ƒê√£ d√πng (gi·ªù)": (
                        f"{time_spent_hours:.1f}h" if time_spent_hours else ""
                    ),
                }
            )

        if issue_data:
            df_issues = pd.DataFrame(issue_data)

            # Th√™m b·ªô l·ªçc
            filter_cols = st.columns(2)
            with filter_cols[0]:
                show_no_estimate = st.checkbox(
                    "Hi·ªÉn th·ªã issues ch∆∞a c√≥ th·ªùi gian d·ª± ki·∫øn", value=True
                )
            with filter_cols[1]:
                show_no_remaining = st.checkbox(
                    "Hi·ªÉn th·ªã issues kh√¥ng c√≤n th·ªùi gian c√≤n l·∫°i", value=True
                )

            # √Åp d·ª•ng b·ªô l·ªçc
            filtered_df = df_issues.copy()

            if not show_no_estimate:
                # L·ªçc ch·ªâ gi·ªØ l·∫°i c√°c issue c√≥ th·ªùi gian d·ª± ki·∫øn
                filtered_df = filtered_df[filtered_df["D·ª± ki·∫øn (gi·ªù)"] != ""]

            if not show_no_remaining:
                # L·ªçc ch·ªâ gi·ªØ l·∫°i c√°c issue c√≥ th·ªùi gian c√≤n l·∫°i
                filtered_df = filtered_df[filtered_df["C√≤n l·∫°i (gi·ªù)"] != ""]

            # Hi·ªÉn th·ªã dataframe ƒë√£ l·ªçc
            st.dataframe(filtered_df, use_container_width=True)


def main():
    # Hi·ªÉn th·ªã CSS cho b·∫£ng
    st.markdown(TAILWIND_TABLE_CSS, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã th·ªëng k√™ sprint
    display_sprint_stats()


if __name__ == "__main__":
    main()
