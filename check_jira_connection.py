import os
import sys
import json
from datetime import datetime

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc v√†o Python path
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

import streamlit as st
from src.services.jira_client import JiraClient
from src.services.jira.base_client import BaseJiraClient
from src.config.config import DEFAULT_TIMEZONE
from src.utils.date_utils import get_current_time
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()


# H√†m che d·ªØ li·ªáu nh·∫°y c·∫£m
def mask_string(s, show_first=4, show_last=0):
    if not s:
        return "Kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh"
    if len(s) <= (show_first + show_last):
        return "*" * len(s)
    return (
        s[:show_first] + "*" * (len(s) - show_first - show_last) + s[-show_last:]
        if show_last > 0
        else s[:show_first] + "*" * (len(s) - show_first)
    )


# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Ki·ªÉm tra k·∫øt n·ªëi Jira",
    page_icon="üîå",
    layout="wide",
)

st.title("Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Jira API")

# Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
st.subheader("Th√¥ng tin c·∫•u h√¨nh")
col1, col2, col3 = st.columns(3)

with col1:
    jira_url = os.environ.get("JIRA_URL", "")
    st.write("JIRA_URL:", jira_url or "Kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")

with col2:
    email = os.environ.get("EMAIL", "")
    st.write("EMAIL:", email or "Kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")

with col3:
    api_token = os.environ.get("API_TOKEN", "")
    st.write(
        "API_TOKEN:", mask_string(api_token) if api_token else "Kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh"
    )

st.divider()

# Th·ª±c hi·ªán ki·ªÉm tra k·∫øt n·ªëi
st.subheader("Ki·ªÉm tra k·∫øt n·ªëi c∆° b·∫£n")
with st.status("ƒêang th·ª±c hi·ªán ki·ªÉm tra...", expanded=True) as status:
    # T·∫°o Jira client
    st.write("üîÑ Kh·ªüi t·∫°o Jira client...")
    try:
        jira_client = JiraClient()
        st.write("‚úÖ Kh·ªüi t·∫°o Jira client th√†nh c√¥ng")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o Jira client: {str(e)}")
        st.stop()

    # Th·ª≠ k·∫øt n·ªëi ƒë·∫øn API
    st.write("üîÑ Ki·ªÉm tra k·∫øt n·ªëi API...")
    try:
        # Test 1: Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng (myself)
        response = jira_client.get("myself")
        if response and response.status_code == 200:
            user_info = response.json()
            st.write("‚úÖ K·∫øt n·ªëi API th√†nh c√¥ng")
            st.write(
                f"üë§ ƒêƒÉng nh·∫≠p v·ªõi ng∆∞·ªùi d√πng: {user_info.get('displayName')} ({user_info.get('emailAddress')})"
            )
        else:
            st.error(
                f"‚ùå L·ªói k·∫øt n·ªëi API: {response.status_code if response else 'Kh√¥ng c√≥ ph·∫£n h·ªìi'}"
            )
            if response:
                st.json(response.json())
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ki·ªÉm tra k·∫øt n·ªëi: {str(e)}")

    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o d·ª± √°n
    st.write("üîÑ Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√†o d·ª± √°n...")
    try:
        projects = jira_client.get_all_projects()
        if projects:
            st.write(f"‚úÖ C√≥ quy·ªÅn truy c·∫≠p v√†o {len(projects)} d·ª± √°n")
            project_list = [f"{p.get('key')} - {p.get('name')}" for p in projects[:5]]
            st.write(
                "V√≠ d·ª•:", ", ".join(project_list) + ("..." if len(projects) > 5 else "")
            )
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y danh s√°ch d·ª± √°n: {str(e)}")

    # Ki·ªÉm tra tr∆∞·ªùng t√πy ch·ªânh
    st.write("üîÑ Ki·ªÉm tra tr∆∞·ªùng t√πy ch·ªânh...")
    try:
        custom_fields = jira_client.get_custom_fields()
        if custom_fields:
            st.write(f"‚úÖ T√¨m th·∫•y {len(custom_fields)} tr∆∞·ªùng t√πy ch·ªânh")
            cf_list = [
                f"{cf.get('name')} (ID: {cf.get('id')})" for cf in custom_fields[:3]
            ]
            st.write(
                "V√≠ d·ª•:", ", ".join(cf_list) + ("..." if len(custom_fields) > 3 else "")
            )
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng t√πy ch·ªânh n√†o")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y danh s√°ch tr∆∞·ªùng t√πy ch·ªânh: {str(e)}")

    # Ki·ªÉm tra truy v·∫•n JQL
    st.write("üîÑ Ki·ªÉm tra truy v·∫•n JQL c∆° b·∫£n...")
    try:
        # T·∫°o truy v·∫•n JQL ƒë∆°n gi·∫£n v·ªõi ng√†y hi·ªán t·∫°i
        today = get_current_time(DEFAULT_TIMEZONE).date().strftime("%Y-%m-%d")
        jql = f'created >= "{today}"'

        issues = jira_client.search_issues(jql=jql, max_results=5)
        if issues:
            st.write(f"‚úÖ Truy v·∫•n JQL th√†nh c√¥ng, t√¨m th·∫•y {len(issues)} issue")
        else:
            st.write("‚úÖ Truy v·∫•n JQL th√†nh c√¥ng, kh√¥ng t√¨m th·∫•y issue n√†o cho h√¥m nay")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi th·ª±c hi·ªán truy v·∫•n JQL: {str(e)}")

    status.update(label="Ki·ªÉm tra ho√†n t·∫•t", state="complete")

# Hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p k·∫øt qu·∫£
st.subheader("K·∫øt qu·∫£ ki·ªÉm tra")
col1, col2 = st.columns(2)

with col1:
    st.info(
        "ƒê·ªÉ ki·ªÉm tra n√¢ng cao h∆°n, b·∫°n c√≥ th·ªÉ v√†o trang 'Custom Fields' ƒë·ªÉ xem chi ti·∫øt v·ªÅ c√°c tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng c√¥ng c·ª• Worklog Report ƒë·ªÉ xem d·ªØ li·ªáu worklog."
    )

with col2:
    if "API_TOKEN" not in os.environ or not os.environ.get("API_TOKEN"):
        st.warning(
            "‚ö†Ô∏è API_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng. H√£y ki·ªÉm tra l·∫°i file .env"
        )
    if "EMAIL" not in os.environ or not os.environ.get("EMAIL"):
        st.warning(
            "‚ö†Ô∏è EMAIL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng. H√£y ki·ªÉm tra l·∫°i file .env"
        )
    if "JIRA_URL" not in os.environ or not os.environ.get("JIRA_URL"):
        st.warning(
            "‚ö†Ô∏è JIRA_URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng. H√£y ki·ªÉm tra l·∫°i file .env"
        )

# Hi·ªÉn th·ªã th·ªùi gian ki·ªÉm tra
st.caption(f"Th·ªùi gian ki·ªÉm tra: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
